We can solve this problem using the concept of disjoint sets and union-find data structure.

First, we initialize an array `parent` of size `n+1` where `parent[i]` represents the parent of computer `i`. Initially, each computer is its own parent, so we set `parent[i] = i` for all `1 <= i <= n`.

Next, we iterate through the given connections and update the parent array using the union operation. For each connection `(a, b)`, we find the parent of `a` and the parent of `b`, and if they are different, we make one of them the parent of the other.

Finally, we iterate through the breakdowns in reverse order and perform the union operation in reverse. For each breakdown `(a, b)`, we find the parent of `a` and the parent of `b`, and if they are different, we make one of them the parent of the other.

After each breakdown, we count the number of distinct parents in the `parent` array and print the count.

Here is the Python code implementing this solution:

```python
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a != b:
        parent[b] = a

def count_components(n, connections, breakdowns):
    parent = [i for i in range(n+1)]  # Initialize parent array
    components = []  # List to store the count of components after each breakdown

    # Union operation for connections
    for a, b in connections:
        union(parent, a, b)

    # Count components after each breakdown
    for a, b in reversed(breakdowns):
        union(parent, a, b)
        components.append(len(set(find_parent(parent, i) for i in range(1, n+1))))

    return components[::-1]  # Reverse the list of components

# Read input
n, m, k = map(int, input().split())
connections = [tuple(map(int, input().split())) for _ in range(m)]
breakdowns = [tuple(map(int, input().split())) for _ in range(k)]

# Calculate and print the number of components after each breakdown
for count in count_components(n, connections, breakdowns):
    print(count, end=' ')
```

The time complexity of this solution is O((n+m+k) * α(n)), where α is the inverse Ackermann function and grows very slowly.