To solve this problem, we can use a recursive approach. We will start by finding the first empty cell in the grid and try to place either an A or a B in it. After placing the character, we will move on to the next empty cell and repeat the process until all cells are filled.

Here is the Python code to solve the problem:

```python
MOD = int(1e9) + 7

def count_ways(grid, n, row, col, used_rows, used_cols):
    # Base case: if all cells are filled, return 1
    if row == n:
        return 1

    # If the current cell is already filled, move to the next cell
    if grid[row][col] != '.':
        next_row = row + (col + 1) // n
        next_col = (col + 1) % n
        return count_ways(grid, n, next_row, next_col, used_rows, used_cols)

    count = 0
    # Try placing A in the current cell
    if not used_rows[row] and not used_cols[col]:
        used_rows[row] = True
        used_cols[col] = True
        next_row = row + (col + 1) // n
        next_col = (col + 1) % n
        count += count_ways(grid, n, next_row, next_col, used_rows, used_cols)
        used_rows[row] = False
        used_cols[col] = False

    # Try placing B in the current cell
    if not used_rows[row] and not used_cols[col]:
        used_rows[row] = True
        used_cols[col] = True
        next_row = row + (col + 1) // n
        next_col = (col + 1) % n
        count += count_ways(grid, n, next_row, next_col, used_rows, used_cols)
        used_rows[row] = False
        used_cols[col] = False

    return count % MOD

n = int(input())
grid = []
for _ in range(n):
    grid.append(input())

used_rows = [False] * n
used_cols = [False] * n

print(count_ways(grid, n, 0, 0, used_rows, used_cols))
```

Explanation:
- We define a recursive function `count_ways` that takes the grid, the size of the grid, the current row and column, and the arrays `used_rows` and `used_cols` to keep track of which rows and columns have already been used.
- In the base case, if we reach the end of the grid (i.e., `row == n`), we return 1, indicating that we have found a valid placement.
- If the current cell is already filled, we move to the next cell and call the function recursively.
- Otherwise, we try placing either an A or a B in the current cell and recursively call the function for the next cell.
- After trying both possibilities, we return the total count modulo `10^9+7`.

The time complexity of this solution is O(n^2) since we need to iterate over all cells in the grid.