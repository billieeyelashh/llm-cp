To solve this problem, we can use the following approach:

1. If $k = 1$, print the permutation $1, 2, \dots, n$. This will be a valid solution since any single element is a monotone subsequence of length 1.

2. If $k = 2$, print the permutation $2, 1, 3, 4, \dots, n$. This will be a valid solution since the subsequence $2, 1$ is a monotone subsequence of length 2.

3. If $k > 2$, we can construct a valid solution as follows:
   - Initialize an empty array $a$.
   - Append the numbers $k+1, k, k-1, \dots, 1$ to $a$.
   - Append the numbers $k+2, k+3, \dots, n$ to $a$.
   - Print the elements of $a$.

This approach guarantees that the longest monotone subsequence has exactly $k$ elements.

Here is the Python code implementing this solution:

```python
t = int(input())

for _ in range(t):
    n, k = map(int, input().split())
    
    if k == 1:
        print(' '.join(map(str, range(1, n+1))))
    elif k == 2:
        print('2 1', end=' ')
        print(' '.join(map(str, range(3, n+1))))
    else:
        a = list(range(k+1, 0, -1))
        a.extend(range(k+2, n+1))
        print(' '.join(map(str, a)))
```

This solution has a time complexity of $O(n)$ and will run efficiently within the given constraints.