To solve this problem, we can iterate over each child and calculate the difference between the amount of food they have and the amount they need. If the difference is positive, it means the child has excess food that can be given to their neighbor. We keep track of the total excess food by summing up all the positive differences.

To minimize the number of steps, we need to distribute the excess food evenly among the children. We can do this by dividing the total excess food by the number of children and rounding it down to the nearest integer. This represents the number of units of food each child should give to their neighbor.

Finally, we print the total excess food divided by the number of children.

Here is the Python code for the solution:

```python
n = int(input())
current_food = list(map(int, input().split()))
required_food = list(map(int, input().split()))

excess_food = 0
for i in range(n):
    diff = current_food[i] - required_food[i]
    if diff > 0:
        excess_food += diff

steps = excess_food // n
print(steps)
```

This solution has a time complexity of O(n), where n is the number of children.