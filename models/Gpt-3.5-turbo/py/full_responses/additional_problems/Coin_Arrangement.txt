To solve this problem optimally, we can follow these steps:

1. Create a function `min_moves(n, coins)` that takes in the width of the grid `n` and the coin distribution `coins` as input.

2. Initialize a variable `total_moves` to 0.

3. Iterate over each cell in the grid and calculate the number of moves required to move all the coins in that cell to their correct positions.

4. For each cell, if the number of coins in that cell is greater than 1, we need to move the excess coins to the adjacent cells. We can calculate the number of moves required using the formula `abs(coins[i][j] - 1)`, where `i` is the row index and `j` is the column index.

5. Add the number of moves calculated in step 4 to `total_moves`.

6. Finally, return `total_moves` as the minimum number of moves required.

Here is the Python implementation of the solution:

```python
def min_moves(n, coins):
    total_moves = 0
    
    for i in range(2):
        for j in range(n):
            if coins[i][j] > 1:
                total_moves += abs(coins[i][j] - 1)
    
    return total_moves

# Read input
n = int(input())
coins = []
for _ in range(2):
    coins.append(list(map(int, input().split())))

# Call the function and print the result
print(min_moves(n, coins))
```

The time complexity of this solution is O(n), where n is the width of the grid.