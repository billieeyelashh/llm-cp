To solve this problem, we can use the concept of disjoint sets and union-find algorithm.

First, we initialize an array `parent` of size `n+1` to keep track of the parent of each child. We also initialize an array `group_size` of size `n+1` to keep track of the size of each group.

Next, for each pair of children who want to visit the same attraction, we perform a union operation on their respective groups. To do this, we find the parents of both children and merge the groups by updating the parent and group size accordingly.

After performing all the union operations, we iterate through the children from 1 to n and count the number of children whose parent is themselves (indicating that they are the root of their group). This count gives us the number of children who can potentially visit Korkeasaari.

Finally, we construct a bit string of length n where a one-bit at index i indicates that it is possible that exactly i children visit Korkeasaari.

Here is the Python implementation:

```python
def find_parent(parent, x):
    if parent[x] == x:
        return x
    parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_groups(parent, group_size, a, b):
    parent_a = find_parent(parent, a)
    parent_b = find_parent(parent, b)

    if parent_a != parent_b:
        if group_size[parent_a] < group_size[parent_b]:
            parent[parent_a] = parent_b
            group_size[parent_b] += group_size[parent_a]
        else:
            parent[parent_b] = parent_a
            group_size[parent_a] += group_size[parent_b]

def main():
    n, m = map(int, input().split())
    parent = list(range(n+1))
    group_size = [1] * (n+1)

    for _ in range(m):
        a, b = map(int, input().split())
        union_groups(parent, group_size, a, b)

    korkeasaari_count = sum(1 for i in range(1, n+1) if find_parent(parent, i) == i)
    bit_string = ''.join('1' if i <= korkeasaari_count else '0' for i in range(1, n+1))

    print(bit_string)

main()
```

The time complexity of this solution is O(n + m * α(n)), where α(n) is the inverse Ackermann function and grows very slowly.