To solve this problem, we can follow the steps below:

1. Read the input values for $n$ and the Pr端fer code.
2. Create an empty list called `tree` to store the edges of the tree.
3. Create a list called `degree` of size $n+1$, initialized with all values set to 1. This list will keep track of the degree of each node in the tree.
4. For each value in the Pr端fer code:
   - Find the smallest leaf node by iterating through the `degree` list and finding the first node with degree 1.
   - Add an edge between the leaf node and the current Pr端fer value.
   - Increment the degree of the leaf node and the current Pr端fer value.
   - Append the edge to the `tree` list.
5. After the loop, there will be two nodes remaining with degree 1. Add an edge between them and append it to the `tree` list.
6. Print each edge in the `tree` list.

Here's the Python implementation:

```python
# Step 1
n = int(input())
prufer = list(map(int, input().split()))

# Step 2
tree = []

# Step 3
degree = [1] * (n+1)

# Step 4
for p in prufer:
    # Step 4a
    leaf = min(node for node in range(1, n+1) if degree[node] == 1)
    
    # Step 4b
    tree.append((leaf, p))
    
    # Step 4c
    degree[leaf] += 1
    degree[p] += 1

# Step 5
leaf1 = min(node for node in range(1, n+1) if degree[node] == 1)
leaf2 = min(node for node in range(1, n+1) if degree[node] == 1 and node != leaf1)
tree.append((leaf1, leaf2))

# Step 6
for edge in tree:
    print(edge[0], edge[1])
```

This solution has a time complexity of $O(n)$, where $n$ is the number of nodes in the tree.