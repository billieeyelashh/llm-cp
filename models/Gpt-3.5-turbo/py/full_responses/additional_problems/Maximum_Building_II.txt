To solve this problem, we can use dynamic programming to calculate the number of ways to place a rectangular building for each size.

First, let's define a 2D array `dp` of size (n+1) x (m+1), where dp[i][j] represents the number of ways to place a building with size i x j.

We can initialize the first row and column of dp with 1, since there is only one way to place a building with size 1 x j or i x 1.

Then, we can iterate through the remaining cells of dp, calculating the number of ways based on the previous cells. For each cell dp[i][j], we can calculate it as the sum of dp[x][j-1] for x from 0 to i, since we can place a building of size i x j by extending a building of size x x (j-1) horizontally.

Finally, we can print the dp array.

Here is the Python code that implements this solution:

```python
# Read input
n, m = map(int, input().split())
forest = [input() for _ in range(n)]

# Initialize dp array
dp = [[0] * (m+1) for _ in range(n+1)]
dp[0][1:] = [1] * m
for i in range(1, n+1):
    dp[i][0] = 1

# Calculate dp array
for i in range(1, n+1):
    for j in range(1, m+1):
        if forest[i-1][j-1] == '.':
            dp[i][j] = sum(dp[x][j-1] for x in range(i+1))

# Print dp array
for i in range(1, n+1):
    print(' '.join(map(str, dp[i][1:])))
```

This solution has a time complexity of O(n^3), where n is the maximum of n and m.