To solve this problem, we can follow the following steps:

1. Initialize a variable `moves` to 0 to keep track of the number of moves.
2. Iterate through the array from index 1 to n-1.
3. Check if the current element is smaller than the previous element and the next element is larger than the current element.
4. If the above condition is true, it means that we need to swap the current element with the next element to form an increasing sequence. Increment `moves` by 1.
5. Check if the current element is larger than the previous element and the next element is smaller than the current element.
6. If the above condition is true, it means that we need to swap the current element with the next element to form a decreasing sequence. Increment `moves` by 1.
7. After iterating through the array, print the value of `moves` as the minimum number of moves required.

Here is the Python code implementing the above algorithm:

```python
n = int(input())
arr = list(map(int, input().split()))

moves = 0

for i in range(1, n-1):
    if arr[i] < arr[i-1] and arr[i+1] > arr[i]:
        moves += 1
    elif arr[i] > arr[i-1] and arr[i+1] < arr[i]:
        moves += 1

print(moves)
```

This solution has a time complexity of O(n) since we iterate through the array once.