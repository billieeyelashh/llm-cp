To count the number of distinct paths of length $k$ in a tree, we can use a depth-first search (DFS) approach. 

Algorithm:
1. Create an adjacency list to represent the tree.
2. Initialize a counter variable `path_count` to 0.
3. Start a DFS from each node in the tree.
   - For each node, maintain a visited array to track the visited nodes during the DFS.
   - Start the DFS from the current node and traverse the adjacent nodes.
   - If the length of the current path is equal to `k`, increment `path_count`.
   - If the length of the current path is less than `k`, continue the DFS to explore further.
4. Print the final value of `path_count`.

Python Solution:

```python
def dfs(node, adj_list, visited, path_length, k, path_count):
    visited[node] = True

    # Check if the current path length matches k
    if path_length == k:
        path_count[0] += 1

    # Continue DFS on adjacent nodes
    for neighbor in adj_list[node]:
        if not visited[neighbor]:
            dfs(neighbor, adj_list, visited, path_length + 1, k, path_count)

    visited[node] = False

n, k = map(int, input().split())
adj_list = [[] for _ in range(n+1)]

# Build adjacency list
for _ in range(n-1):
    a, b = map(int, input().split())
    adj_list[a].append(b)
    adj_list[b].append(a)

# Initialize variables
visited = [False] * (n+1)
path_count = [0]

# Start DFS from each node
for node in range(1, n+1):
    dfs(node, adj_list, visited, 0, k, path_count)

print(path_count[0])
```

The time complexity of this solution is O(n), where n is the number of nodes in the tree.