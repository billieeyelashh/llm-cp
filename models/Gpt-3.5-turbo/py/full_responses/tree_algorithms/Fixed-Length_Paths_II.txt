To solve this problem, we can use a depth-first search (DFS) traversal on the given tree. 

First, we represent the tree as an adjacency list. Then, we initialize a counter variable `count` to 0, which will keep track of the number of paths that satisfy the given conditions.

Next, we define a recursive function `dfs` that takes the current node `cur`, the parent node `prev`, and the current path length `length`. In each recursive call of `dfs`, we check if the current path length falls within the required range (`k_1 <= length <= k_2`). If it does, we increment `count` by 1.

Then, for each adjacent node `next` of `cur`, if it is not equal to the previous node `prev`, we recursively call `dfs` with `next` as the current node, `cur` as the parent node, and `length + 1` as the new path length.

Finally, we start the DFS traversal from any arbitrary node, passing it as both the current node and the parent node to the `dfs` function.

Here is the Python code for the solution:

```python
n, k_1, k_2 = map(int, input().split())

# Create adjacency list representation of the tree
adj_list = [[] for _ in range(n + 1)]
for _ in range(n - 1):
    a, b = map(int, input().split())
    adj_list[a].append(b)
    adj_list[b].append(a)

count = 0

def dfs(cur, prev, length):
    global count

    if k_1 <= length <= k_2:
        count += 1

    for next in adj_list[cur]:
        if next != prev:
            dfs(next, cur, length + 1)

# Start the DFS traversal from an arbitrary node (e.g., node 1)
dfs(1, 0, 0)

print(count)
```

The time complexity of this solution is O(n), where n is the number of nodes in the tree.