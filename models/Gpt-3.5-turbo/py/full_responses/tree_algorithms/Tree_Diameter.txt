To solve this problem, we can use a simple depth-first search (DFS) algorithm to find the farthest node from any given starting node. 

First, we'll read the input and create an adjacency list representation of the tree. We can use a dictionary where the keys are the nodes and the values are lists of adjacent nodes.

Next, we'll define a helper function called `dfs` that takes a starting node and performs a DFS traversal to find the farthest node from it. This function will keep track of the maximum distance found so far and the node that corresponds to it. 

Inside the `dfs` function, we'll iterate over the adjacent nodes of the current node. For each adjacent node, if it has not been visited, we'll update its distance from the starting node and recursively call the `dfs` function on it. 

Finally, we'll call the `dfs` function on any arbitrary node to find the farthest node from it. Then, we'll call the `dfs` function again on the farthest node to find the diameter of the tree, which is the maximum distance between any two nodes.

Here's the Python code to solve the problem:

```python
n = int(input())
adj = {i: [] for i in range(1, n+1)}

for _ in range(n-1):
    a, b = map(int, input().split())
    adj[a].append(b)
    adj[b].append(a)

def dfs(node, distance, visited):
    visited[node] = True
    max_distance = distance
    farthest_node = node

    for neighbor in adj[node]:
        if not visited[neighbor]:
            new_distance = distance + 1
            temp_distance, temp_node = dfs(neighbor, new_distance, visited)
            if temp_distance > max_distance:
                max_distance = temp_distance
                farthest_node = temp_node

    return max_distance, farthest_node

# Find the farthest node from any arbitrary starting node
start_node = 1
visited = {i: False for i in range(1, n+1)}
_, farthest_node = dfs(start_node, 0, visited)

# Find the diameter of the tree
visited = {i: False for i in range(1, n+1)}
diameter, _ = dfs(farthest_node, 0, visited)

print(diameter)
```

The time complexity of this solution is O(n), where n is the number of nodes in the tree.