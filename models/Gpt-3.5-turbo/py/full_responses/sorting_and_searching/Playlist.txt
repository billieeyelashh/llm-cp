To solve this problem, we can use a sliding window approach. We will keep track of the current longest sequence of unique songs using a set. 

We will iterate through the playlist and for each song, we will add it to the set. If the song is already present in the set, we have encountered a duplicate song. In this case, we will remove the songs from the beginning of the sequence until the duplicate song is no longer in the set. This will allow us to maintain a sequence of unique songs.

At each step, we update the maximum length of the sequence if it is greater than the previous maximum.

Here is the Python code for the solution:

```python
n = int(input())
playlist = list(map(int, input().split()))

# Set to store unique songs
unique_songs = set()

# Variables to keep track of the current sequence
current_length = 0
max_length = 0

# Sliding window approach
for song in playlist:
    if song in unique_songs:
        # Remove the songs from the beginning of the sequence
        while playlist[current_length] != song:
            unique_songs.remove(playlist[current_length])
            current_length += 1
        # Move the pointer to the next song
        current_length += 1
    else:
        unique_songs.add(song)
    
    # Update the maximum length if necessary
    max_length = max(max_length, len(unique_songs))

print(max_length)
```

The time complexity of this solution is O(n) as we iterate through the playlist once. The space complexity is also O(n) as we store the unique songs in a set.