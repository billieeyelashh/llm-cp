To solve this problem, we can use the concept of prefix sums.

First, let's create an array `prefix` of size `n+1` and initialize it with 0. This array will store the cumulative sum of elements up to each index.

Next, let's iterate through the given array and compute the prefix sum at each index. We can use the formula `prefix[i] = prefix[i-1] + a[i]` to calculate the prefix sum.

Now, let's create a dictionary `count` to store the frequency of each remainder when the prefix sum is divided by `n`. We will initialize `count[0] = 1` since an empty subarray with sum 0 is always divisible by `n`.

For each prefix sum `prefix[i]`, we can calculate the remainder `rem = prefix[i] % n`. If `rem` exists in the `count` dictionary, it means there are `count[rem]` subarrays from previous indices that have a sum divisible by `n`. So, we increment our answer by `count[rem]`.

Finally, if `rem` exists in the `count` dictionary, we update `count[rem]` by incrementing it by 1. Otherwise, we add `rem` as a new key to the `count` dictionary with a value of 1.

After iterating through all the elements, the answer will be stored in a variable called `ans`.

Here's the python implementation of the above approach:

```python
n = int(input())
a = list(map(int, input().split()))

prefix = [0] * (n+1)
for i in range(1, n+1):
    prefix[i] = prefix[i-1] + a[i-1]

count = {0: 1}
ans = 0
for i in range(1, n+1):
    rem = prefix[i] % n
    if rem in count:
        ans += count[rem]
    count[rem] = count.get(rem, 0) + 1

print(ans)
```

This solution has a time complexity of O(n) and a space complexity of O(n).