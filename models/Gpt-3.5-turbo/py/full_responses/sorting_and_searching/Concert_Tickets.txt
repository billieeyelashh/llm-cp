To solve this problem optimally, we can use a data structure called a multiset, which allows us to efficiently store and retrieve elements in a sorted order. In Python, we can achieve this using the built-in `bisect` module.

Here's the step-by-step solution:

1. Read the inputs for $n$, $m$, the ticket prices, and the maximum prices for each customer.
2. Sort the ticket prices in ascending order.
3. Iterate over each customer:
    a. Use the bisect_left function from the bisect module to find the index of the ticket price that is just greater than the customer's maximum price.
    b. If the index is 0, it means that there are no tickets available for the customer. Print -1 and continue to the next customer.
    c. Otherwise, decrement the index by 1 to get the index of the ticket price that does not exceed the maximum price. Remove this price from the list of ticket prices using the del statement.
4. Print the price that each customer will pay.

Here's the Python code for the solution:

```python
from bisect import bisect_left

# Read the inputs
n, m = map(int, input().split())
ticket_prices = list(map(int, input().split()))
customer_prices = list(map(int, input().split()))

# Sort the ticket prices
ticket_prices.sort()

# Iterate over each customer
for price in customer_prices:
    # Find the index of the ticket price that is just greater than the customer's maximum price
    index = bisect_left(ticket_prices, price)
    
    # If there are no tickets available for the customer, print -1 and continue
    if index == 0:
        print(-1)
        continue
    
    # Decrement the index to get the index of the ticket price that does not exceed the maximum price
    index -= 1
    
    # Remove the ticket price from the list of ticket prices
    del ticket_prices[index]
    
    # Print the price that the customer will pay
    print(ticket_prices[index])
```

This solution has a time complexity of O(nlogn + mlogn), where n is the number of tickets and m is the number of customers.