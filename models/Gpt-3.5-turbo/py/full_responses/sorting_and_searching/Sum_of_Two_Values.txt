To solve this problem, we can use a hashmap to store the values we have encountered so far. As we iterate through the array, for each element, we check if the complement (i.e., the difference between the target sum and the current element) exists in the hashmap. If it does, we have found our solution. Otherwise, we add the current element to the hashmap and continue.

Here is the Python code for the solution:

```python
n, x = map(int, input().split())
arr = list(map(int, input().split()))

# Create a hashmap to store the values
hashmap = {}

# Iterate through the array
for i in range(n):
    # Check if the complement exists in the hashmap
    complement = x - arr[i]
    if complement in hashmap:
        # If it does, print the positions and exit
        print(hashmap[complement], i+1)
        exit()
    
    # Add the current element to the hashmap
    hashmap[arr[i]] = i+1

# If no solution is found, print IMPOSSIBLE
print("IMPOSSIBLE")
```

This solution has a time complexity of O(n) as we iterate through the array once. The space complexity is also O(n) as we store the values in the hashmap.