To solve this problem, we can use a nested loop to iterate over all possible combinations of three values from the array. For each combination, we check if their sum is equal to the target sum. If we find a valid combination, we print its positions and exit the loop.

Here is the Python code for the solution:

```python
n, x = map(int, input().split())
array = list(map(int, input().split()))

# Iterate over all possible combinations of three values
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            # Check if the sum is equal to the target sum
            if array[i] + array[j] + array[k] == x:
                print(i+1, j+1, k+1)
                exit()

# If no valid combination is found, print IMPOSSIBLE
print("IMPOSSIBLE")
```

This solution has a time complexity of O(n^3) since we are using three nested loops to iterate over all possible combinations. However, given the constraints, this approach should be efficient enough to solve the problem within the time limits.