To solve this problem optimally, we can use the concept of a stack.

We will iterate through the ranges from left to right, and for each range, we will check if it contains any previous range(s) and if any previous range(s) contain it.

Let's define a class `Range` to store the start and end values of each range, along with its index. We will also define two empty lists, `contains` and `contained_by`, to store the results.

Here is the Python solution:

```python
class Range:
    def __init__(self, start, end, index):
        self.start = start
        self.end = end
        self.index = index

n = int(input())
ranges = []
contains = [0] * n
contained_by = [0] * n
stack = []

for i in range(n):
    start, end = map(int, input().split())
    ranges.append(Range(start, end, i))

for i in range(n):
    while stack and ranges[i].end > ranges[stack[-1]].end:
        contains[ranges[stack.pop()].index] = 1

    if stack:
        contained_by[ranges[i].index] = 1

    stack.append(i)

print(' '.join(map(str, contains)))
print(' '.join(map(str, contained_by)))
```

The solution has a time complexity of O(n), where n is the number of ranges.