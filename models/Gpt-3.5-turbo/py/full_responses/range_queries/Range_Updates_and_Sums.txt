We can solve this problem efficiently using a segment tree data structure. A segment tree is a binary tree where each node represents a range of values in the array. Each leaf node represents a single element of the array, and each internal node represents the sum of its children.

To solve the problem, we will perform the following steps:

1. Build the segment tree: We will start by creating an empty segment tree with $4n$ nodes (where $n$ is the size of the array). Then, we will recursively build the segment tree by dividing the range of each node in half until we reach the leaf nodes. At each node, we will compute the sum of its children.

2. Process the queries: For each query, we will check its type and perform the corresponding operation on the segment tree. If the query is of type 1 or 2, we will update the segment tree by increasing or setting the values in the given range. If the query is of type 3, we will calculate the sum of values in the given range using the segment tree.

Here is the Python code that implements the above solution:

```python
class SegmentTree:
    def __init__(self, n):
        self.size = 4 * n
        self.tree = [0] * self.size
    
    def build(self, arr, v, tl, tr):
        if tl == tr:
            self.tree[v] = arr[tl]
        else:
            tm = (tl + tr) // 2
            self.build(arr, 2 * v, tl, tm)
            self.build(arr, 2 * v + 1, tm + 1, tr)
            self.tree[v] = self.tree[2 * v] + self.tree[2 * v + 1]
    
    def update(self, v, tl, tr, l, r, add, set_val):
        if l > r:
            return
        if l == tl and r == tr:
            if set_val is not None:
                self.tree[v] = (r - l + 1) * set_val
            else:
                self.tree[v] += (r - l + 1) * add
        else:
            tm = (tl + tr) // 2
            self.update(2 * v, tl, tm, l, min(r, tm), add, set_val)
            self.update(2 * v + 1, tm + 1, tr, max(l, tm + 1), r, add, set_val)
            self.tree[v] = self.tree[2 * v] + self.tree[2 * v + 1]
    
    def query(self, v, tl, tr, l, r):
        if l > r:
            return 0
        if l == tl and r == tr:
            return self.tree[v]
        tm = (tl + tr) // 2
        left_sum = self.query(2 * v, tl, tm, l, min(r, tm))
        right_sum = self.query(2 * v + 1, tm + 1, tr, max(l, tm + 1), r)
        return left_sum + right_sum


# Read input
n, q = map(int, input().split())
arr = list(map(int, input().split()))

# Build the segment tree
st = SegmentTree(n)
st.build(arr, 1, 0, n - 1)

# Process queries
for _ in range(q):
    query_type, a, b, *args = map(int, input().split())
    if query_type == 1:
        x = args[0]
        st.update(1, 0, n - 1, a - 1, b - 1, x, None)
    elif query_type == 2:
        x = args[0]
        st.update(1, 0, n - 1, a - 1, b - 1, 0, x)
    else:
        result = st.query(1, 0, n - 1, a - 1, b - 1)
        print(result)
```

This solution has a time complexity of $O(n \log n)$ for building the segment tree and $O(\log n)$ for each query, resulting in an overall time complexity of $O((n + q) \log n)$.