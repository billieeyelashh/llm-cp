To solve this problem, we can use a data structure called a Fenwick Tree or Binary Indexed Tree (BIT). A BIT allows us to efficiently compute prefix sums and update individual elements in logarithmic time.

First, we can preprocess the input array to create a frequency array. The frequency array stores the count of each distinct value in the input array. We can use this frequency array to answer each query in constant time.

Here is the step-by-step solution in Python:

```python
def build_frequency_array(arr):
    freq = {}
    for num in arr:
        if num not in freq:
            freq[num] = 0
        freq[num] += 1
    return freq

def create_bit(n):
    bit = [0] * (n + 1)
    return bit

def update(bit, idx, val):
    while idx < len(bit):
        bit[idx] += val
        idx += idx & -idx

def query(bit, idx):
    count = 0
    while idx > 0:
        count += bit[idx]
        idx -= idx & -idx
    return count

# Read input
n, q = map(int, input().split())
arr = list(map(int, input().split()))

# Build frequency array
freq = build_frequency_array(arr)

# Create BIT
bit = create_bit(n)

# Update BIT with initial frequencies
for num, count in freq.items():
    update(bit, num, count)

# Answer queries
for _ in range(q):
    a, b = map(int, input().split())
    distinct_count = query(bit, b) - query(bit, a - 1)
    print(distinct_count)
```

This solution has a time complexity of O((n + q) log n) since we need to update the BIT and answer each query. The space complexity is O(n) to store the frequency array and the BIT.