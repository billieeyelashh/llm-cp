To solve this problem, we can use the Pick's Theorem. According to Pick's Theorem, the area of a polygon with lattice points vertices is given by:

Area = Number of interior lattice points + (Number of boundary lattice points / 2) - 1

So, our task is to calculate the area of the polygon and then use this formula to find the number of interior lattice points and boundary lattice points.

Here is the Python code to solve the problem:

```python
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

def lattice_points(n, vertices):
    area = 0
    boundary_points = 0

    for i in range(n):
        x1, y1 = vertices[i]
        x2, y2 = vertices[(i + 1) % n]

        area += x1 * y2 - x2 * y1
        boundary_points += gcd(abs(x1 - x2), abs(y1 - y2))

    area = abs(area) // 2
    interior_points = area - (boundary_points // 2) + 1

    return interior_points, boundary_points

# Read input
n = int(input())
vertices = []
for _ in range(n):
    x, y = map(int, input().split())
    vertices.append((x, y))

# Solve the problem
interior_points, boundary_points = lattice_points(n, vertices)

# Print the result
print(interior_points, boundary_points)
```

The code uses a helper function `gcd` to calculate the greatest common divisor of two numbers using Euclid's algorithm. Then, the `lattice_points` function calculates the area of the polygon by iterating over the vertices and using the Shoelace formula. It also counts the number of boundary points using the gcd function.

Finally, the code reads the input, calls the `lattice_points` function, and prints the result.