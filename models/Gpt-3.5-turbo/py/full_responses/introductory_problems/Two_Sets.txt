To solve this problem, we can use the fact that the sum of the numbers from $1$ to $n$ is given by the formula $\frac{n \cdot (n+1)}{2}$. 

We can start by calculating the sum of the numbers from $1$ to $n$. If this sum is odd, then it is not possible to divide the numbers into two sets of equal sum. In this case, we can simply output "NO" and terminate the program.

If the sum is even, we can proceed to construct the two sets. We can start by initializing two empty lists to represent the two sets. Then, we can iterate over the numbers from $n$ down to $1$. For each number, we check if adding it to one of the sets would cause the sum of that set to exceed half the total sum. If not, we add the number to that set. 

Finally, we output "YES" and the sizes and contents of the two sets. 

Here is the Python code to solve this problem:

```python
def divide_numbers(n):
    total_sum = n * (n + 1) // 2

    if total_sum % 2 != 0:
        return "NO"

    set1 = []
    set2 = []
    current_sum = 0

    for i in range(n, 0, -1):
        if current_sum + i <= total_sum // 2:
            set1.append(i)
            current_sum += i
        else:
            set2.append(i)

    return "YES\n" + str(len(set1)) + "\n" + " ".join(map(str, set1)) + "\n" + str(len(set2)) + "\n" + " ".join(map(str, set2))

# Example usage:
n = int(input())
print(divide_numbers(n))
```

This code has a time complexity of O(n) as we iterate over the numbers from n down to 1.