To solve this problem optimally, we can use dynamic programming. We will define a function $\text{dp}(i)$ that represents the minimum total time to win the game starting from level $i$.

Let's analyze the recursive formula for $\text{dp}(i)$. If we choose to kill the monster at level $i$, the total time will be equal to $s_i \cdot f_i$ plus the minimum total time starting from level $i+1$. On the other hand, if we choose to escape the monster at level $i$, the total time will be equal to the minimum total time starting from level $i+1$. We can express this as follows:

$$\text{dp}(i) = \min\left(s_i \cdot f_i + \text{dp}(i+1), \text{dp}(i+1)\right)$$

We can calculate $\text{dp}(i)$ for each level $i$ starting from $n-1$ and working our way back to level 1. Finally, the minimum total time to win the game will be equal to $\text{dp}(1)$.

Here is the Python code implementing the solution:

```python
def solve(n, x, s, f):
    dp = [0] * (n + 1)
    for i in range(n - 1, 0, -1):
        dp[i] = min(s[i] * f[i] + dp[i + 1], dp[i + 1])
    return dp[1]

# Read input
n, x = map(int, input().split())
s = [0] + list(map(int, input().split()))
f = [0] + list(map(int, input().split()))

# Solve problem and print result
result = solve(n, x, s, f)
print(result)
```

The time complexity of this solution is $O(n)$, where $n$ is the number of levels.