To solve this problem, we can use dynamic programming. We will define a 3D table `dp` where `dp[i][j][k]` represents the minimum number of coins required to reach room `i` on day `j` using `k` unused teleporters.

We will initialize `dp` with a large value for all entries except `dp[1][0][0] = 0` because on day 0, starting from room 1, we don't need any coins.

Then, for each day `j`, starting from 1 up to `k`, we will iterate over all rooms and teleporters. For each room `i`, if there is a teleporter from room `a` to room `i`, we can consider using it on day `j`. In this case, the minimum number of coins required will be `dp[a][j-1][k-1] + 1` since we are using one more teleporter.

Finally, the answer will be the minimum value in the last day `dp[n][k][0:k+1]`.

Here is the Python code implementing the above approach:

```python
import sys

n, m, k = map(int, input().split())

# Initialize the dp table
INF = sys.maxsize
dp = [[[INF] * (k+1) for _ in range(m+1)] for _ in range(n+1)]
dp[1][0][0] = 0

# Read teleporters
teleporters = []
for _ in range(m):
    a, b = map(int, input().split())
    teleporters.append((a, b))

# Dynamic programming
for j in range(1, k+1):
    for i in range(1, n+1):
        for a, b in teleporters:
            if b == i:
                for x in range(k-1, -1, -1):
                    dp[i][j][x+1] = min(dp[i][j][x+1], dp[a][j-1][x] + 1)

# Find the minimum number of coins required on the last day
min_coins = min(dp[n][k])

# If it is not possible to play the game for k days, print -1
if min_coins == INF:
    print(-1)
else:
    print(min_coins)

# Print the routes for each day
for j in range(1, k+1):
    for i in range(1, n+1):
        for a, b in teleporters:
            if b == i and dp[i][j][k] == dp[a][j-1][k-1] + 1:
                print(a, end=' ')
                break
    print(n)
```

The time complexity of this solution is O(n * m * k), which is efficient enough to handle the given constraints.