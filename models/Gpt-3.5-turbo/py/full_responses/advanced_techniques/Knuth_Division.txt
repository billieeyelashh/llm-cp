To solve this problem optimally, we can use a greedy approach. 

We can start by sorting the array in non-decreasing order. This way, we can split the smallest numbers first and gradually move to larger ones.

Here is the step-by-step solution in Python:

```python
# Read input
n = int(input())
array = list(map(int, input().split()))

# Sort the array in non-decreasing order
array.sort()

# Initialize total cost
total_cost = 0

# Iterate over the sorted array
for i in range(n):
    # Calculate the cost of splitting the current subarray
    cost = array[i] * (n-i)
    # Add the cost to the total cost
    total_cost += cost

# Print the minimum total cost
print(total_cost)
```

This solution has a time complexity of O(n log n) due to the sorting operation. However, it provides the optimal solution for the given problem.