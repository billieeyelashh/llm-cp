To solve this problem, we can use a dynamic programming approach. Let's define a 2D array dp, where dp[i][j] represents the number of ways to achieve a sum of j using the first i elements of the array.

We can fill in the dp array as follows:

1. Initialize dp[i][0] = 1 for all i, since there is always one way to achieve a sum of 0 (i.e., by choosing no elements).

2. For each element t[i] in the array, iterate over all possible sums j from 1 to x. For each j, we have two choices:
   a. If t[i] > j, we cannot include t[i] in the sum, so dp[i][j] = dp[i-1][j] (the number of ways to achieve the sum j without using t[i]).
   b. If t[i] <= j, we have two sub-cases:
      - Include t[i] in the sum: dp[i][j] = dp[i-1][j - t[i]] (the number of ways to achieve the remaining sum j - t[i] using the previous i-1 elements).
      - Do not include t[i] in the sum: dp[i][j] = dp[i-1][j] (same as in case a).

The final answer will be stored in dp[n][x].

Here's the Python code to solve the problem:

```python
n, x = map(int, input().split())
t = list(map(int, input().split()))

dp = [[0] * (x + 1) for _ in range(n + 1)]
dp[0][0] = 1

for i in range(1, n + 1):
    for j in range(x + 1):
        dp[i][j] = dp[i-1][j]
        if t[i-1] <= j:
            dp[i][j] += dp[i-1][j - t[i-1]]

print(dp[n][x])
```

The time complexity of this solution is O(n*x), which is efficient given the constraints of the problem.