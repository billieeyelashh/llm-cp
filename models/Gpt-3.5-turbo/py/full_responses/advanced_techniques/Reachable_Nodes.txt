To solve this problem, we can use depth-first search (DFS) to traverse the graph and count the number of reachable nodes from each starting node.

First, we need to represent the graph using an adjacency list. We can use a dictionary where the keys are the nodes and the values are lists of nodes that can be reached from the key node.

Next, we will initialize a list `reachable` of size $n$ to keep track of the number of reachable nodes for each node. Initially, all nodes will have 0 reachable nodes.

Then, we will iterate through each node in the graph and perform a DFS starting from that node. During the DFS, we will increment the `reachable` count for each visited node.

Finally, we will print the `reachable` list as the output.

Here is the Python code implementation:

```python
def dfs(node, graph, visited, reachable):
    visited[node] = True
    reachable[node] += 1

    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs(neighbor, graph, visited, reachable)

n, m = map(int, input().split())

graph = {i: [] for i in range(1, n+1)}

for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)

reachable = [0] * (n+1)
visited = [False] * (n+1)

for node in range(1, n+1):
    if not visited[node]:
        dfs(node, graph, visited, reachable)

print(' '.join(map(str, reachable[1:])))
```

The time complexity of this solution is O(n + m), where n is the number of nodes and m is the number of edges, as we perform a DFS starting from each node once.