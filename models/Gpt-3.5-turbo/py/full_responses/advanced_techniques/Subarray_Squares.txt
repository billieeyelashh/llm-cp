To solve this problem optimally, we can use dynamic programming.

Let's define a function $dp(i, k)$ where $i$ represents the index of the last element in the array and $k$ represents the number of subarrays remaining to be created.

The base case is when $k=0$, which means we have already created all the subarrays. In this case, the cost is 0.

For the general case, we can iterate over all possible indices $j$ where $j < i$, and calculate the cost of the subarray from $j+1$ to $i$. The cost of this subarray is $(x_{j+1} + x_{j+2} + \dots + x_i)^2$, which can be simplified to $(\sum_{l=j+1}^{i} x_l)^2$.

Then, the optimal cost for $dp(i, k)$ can be calculated as follows:

$dp(i, k) = \min_{j=0}^{i-1} \{dp(j, k-1) + (\sum_{l=j+1}^{i} x_l)^2\}$

Finally, the answer to the problem will be $dp(n, k)$.

Let's implement this solution in Python:

```python
def minimum_cost(n, k, arr):
    dp = [[float('inf')] * (k+1) for _ in range(n+1)]
    dp[0][0] = 0
    
    prefix_sum = [0] * (n+1)
    for i in range(1, n+1):
        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]
    
    for i in range(1, n+1):
        for j in range(1, k+1):
            for t in range(i):
                dp[i][j] = min(dp[i][j], dp[t][j-1] + (prefix_sum[i] - prefix_sum[t])**2)
    
    return dp[n][k]

# Read input
n, k = map(int, input().split())
arr = list(map(int, input().split()))

# Calculate and print the minimum total cost
print(minimum_cost(n, k, arr))
```

The time complexity of this solution is $O(n^3)$, which is efficient enough to handle the given constraints.