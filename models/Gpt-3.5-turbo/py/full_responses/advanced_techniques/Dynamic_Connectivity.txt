We can solve this problem efficiently using the Union-Find data structure. 

The Union-Find data structure is used to keep track of a partition of a set into disjoint subsets. It supports two operations efficiently:
- Union: merge two subsets into one.
- Find: determine which subset a particular element belongs to.

In our case, we can represent each node as an element of the set. Initially, each node is in its own subset (component). When an edge is created, we perform a union operation to merge the subsets of the two nodes. When an edge is removed, we perform a find operation to determine if the two nodes are still in the same subset. If they are, we perform a union operation to split the subset into two.

Here is the Python code to solve the problem:

```python
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1] * n
        self.num_components = n

    def find(self, x):
        if self.parent[x] == x:
            return x
        self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            if self.size[root_x] < self.size[root_y]:
                root_x, root_y = root_y, root_x
            self.parent[root_y] = root_x
            self.size[root_x] += self.size[root_y]
            self.num_components -= 1

    def get_num_components(self):
        return self.num_components


def count_components(n, edges, events):
    uf = UnionFind(n)
    result = [uf.get_num_components()]

    for a, b in edges:
        uf.union(a-1, b-1)
        result.append(uf.get_num_components())

    for t, a, b in events:
        if t == 1:
            uf.union(a-1, b-1)
        else:
            if uf.find(a-1) == uf.find(b-1):
                uf.union(a-1, b-1)
        result.append(uf.get_num_components())

    return result


# Read input
n, m, k = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(m)]
events = [tuple(map(int, input().split())) for _ in range(k)]

# Solve the problem
result = count_components(n, edges, events)

# Print the result
print(' '.join(map(str, result)))
```

The time complexity of this solution is O((m+k)⋅α(n)), where α is the inverse Ackermann function. The inverse Ackermann function grows extremely slowly, so in practice, this algorithm is very efficient.