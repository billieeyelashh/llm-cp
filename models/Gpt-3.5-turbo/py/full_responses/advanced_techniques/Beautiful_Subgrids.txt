To solve this problem, we can use dynamic programming to count the number of beautiful subgrids. 

Let's define a 2D array dp of size (n+1) x (n+1), where dp[i][j] represents the number of beautiful subgrids ending at the cell (i, j). 

We can fill in this array by iterating through each cell of the grid. For each cell (i, j), if it is black, we can calculate the number of beautiful subgrids ending at this cell based on the values from its neighbors.

To do this, we need to consider the cells (i-1, j), (i, j-1), and (i-1, j-1). If all three cells are black, then we can extend beautiful subgrids ending at these cells to include the current cell as well. We can take the minimum value among dp[i-1][j], dp[i][j-1], and dp[i-1][j-1] and add 1 to it to update dp[i][j].

Finally, we can sum up all the values in the dp array to get the total number of beautiful subgrids.

Here is the Python code to solve the problem:

```python
n = int(input())
grid = [list(map(int, input())) for _ in range(n)]

dp = [[0] * (n+1) for _ in range(n+1)]

count = 0
for i in range(1, n+1):
    for j in range(1, n+1):
        if grid[i-1][j-1] == 1:
            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
            count += dp[i][j]

print(count)
```

The time complexity of this solution is O(n^2), where n is the size of the grid.