To solve this problem optimally, we can use the KMP (Knuth-Morris-Pratt) algorithm. The KMP algorithm allows us to efficiently search for a pattern in a given string.

First, we need to preprocess each pattern to build an auxiliary array called the "pi" array. This array stores information about the longest proper prefix of the pattern that is also a suffix. We can construct the "pi" array in linear time using the KMP preprocessing algorithm.

After preprocessing each pattern, we can iterate through the string and check for matches using the KMP matching algorithm. For each pattern, we initialize a count variable to zero. If a match is found at position i, we increment the count variable and continue searching for the next match starting from position i+1.

Finally, we print the count for each pattern.

Here's the Python implementation:

```python
def compute_pi(pattern):
    n = len(pattern)
    pi = [0] * n
    j = 0
    
    for i in range(1, n):
        while j > 0 and pattern[i] != pattern[j]:
            j = pi[j-1]
        
        if pattern[i] == pattern[j]:
            j += 1
            pi[i] = j
    
    return pi

def kmp_search(text, pattern):
    n = len(text)
    m = len(pattern)
    pi = compute_pi(pattern)
    count = 0
    j = 0
    
    for i in range(n):
        while j > 0 and text[i] != pattern[j]:
            j = pi[j-1]
        
        if text[i] == pattern[j]:
            if j == m - 1:
                count += 1
                j = pi[j]
            else:
                j += 1
    
    return count

# Read input
text = input()
k = int(input())
patterns = [input() for _ in range(k)]

# Process patterns and count occurrences in the string
for pattern in patterns:
    count = kmp_search(text, pattern)
    print(count)
```

This solution has a time complexity of O(n + k), where n is the length of the string and k is the total length of the patterns.