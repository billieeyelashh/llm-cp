To find all border lengths of a given string, we can use the Z algorithm. The Z algorithm preprocesses the string and constructs an array Z[], where Z[i] represents the longest substring starting from index i which is also a prefix of the string.

Here's the Python solution using the Z algorithm:

```python
def z_algorithm(s):
    n = len(s)
    Z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            Z[i] = min(r - i + 1, Z[i - l])
        while i + Z[i] < n and s[Z[i]] == s[i + Z[i]]:
            Z[i] += 1
        if i + Z[i] - 1 > r:
            l, r = i, i + Z[i] - 1
    return Z

def border_lengths(s):
    n = len(s)
    Z = z_algorithm(s)
    border_lengths = []
    for i in range(1, n):
        if i + Z[i] == n:
            border_lengths.append(Z[i])
    return border_lengths

# Driver code
s = input().strip()
border_lengths = border_lengths(s)
print(' '.join(map(str, border_lengths)))
```

Explanation:
1. The `z_algorithm` function implements the Z algorithm to find the Z array for the given string `s`.
2. The `border_lengths` function finds all the border lengths by iterating over the Z array and checking if the current index `i` plus its corresponding Z value is equal to the length of the string `n`.
3. The driver code takes the input string, calls the `border_lengths` function, and prints the border lengths in increasing order.

This solution has a time complexity of O(n), where n is the length of the string.