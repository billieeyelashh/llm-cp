To solve this problem efficiently, we can use a technique called "prefix sums" or "cumulative sums". 

First, let's create an array `prefix` of size n+1. The element at index i of this array will store the count of characters from position 1 to i in the given string.

Next, for each operation 1, we can update the count of character x at position k in the prefix array by incrementing or decrementing the value at index k.

For each operation 2, we can check if the substring from position a to b is a palindrome by comparing the count of each character at positions a and b. If the counts are equal for all characters, then the substring is a palindrome.

Here is the Python implementation:

```python
def is_palindrome(prefix, a, b):
    for i in range(26):  # assuming only lowercase letters
        if prefix[i][b] - prefix[i][a-1] != 0:
            return False
    return True

n, m = map(int, input().split())
s = input()

# initialize the prefix array
prefix = [[0] * (n+1) for _ in range(26)]

# compute cumulative sums
for i in range(1, n+1):
    for j in range(26):
        prefix[j][i] = prefix[j][i-1]
    prefix[ord(s[i-1]) - ord('a')][i] += 1

# process the operations
for _ in range(m):
    op, *args = input().split()
    if op == '1':
        k, x = map(int, args)
        k -= 1  # adjust position to 0-indexed
        prefix[ord(s[k]) - ord('a')][k+1] -= 1
        prefix[x - ord('a')][k+1] += 1
        s = s[:k] + chr(x) + s[k+1:]
    else:
        a, b = map(int, args)
        if is_palindrome(prefix, a, b):
            print('YES')
        else:
            print('NO')
```

The time complexity of this solution is O(n + m), where n is the length of the string and m is the number of operations. This is because we need to preprocess the string to compute the prefix array, which takes O(n) time, and each operation takes O(1) time to check if the substring is a palindrome.