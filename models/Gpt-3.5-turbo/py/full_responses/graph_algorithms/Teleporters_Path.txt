To solve this problem, we can use depth-first search (DFS) to find a valid sequence of levels.

First, we need to represent the teleporters as an adjacency list. We can use a dictionary in Python, where the keys are the levels and the values are lists of adjacent levels.

Then, we initialize an empty stack and a visited set. We start by pushing level 1 onto the stack and add it to the visited set.

Next, we enter a loop where we pop a level from the stack. If the popped level is equal to n, we have found a valid sequence and can stop.

Otherwise, we iterate through the adjacent levels of the popped level. If an adjacent level has not been visited before, we push it onto the stack, add it to the visited set, and break the loop. This ensures that we explore the adjacent levels in order.

If we have exhausted all the adjacent levels without finding a valid sequence, we backtrack by popping a level from the stack and continue the loop.

If we have processed all the levels and still haven't found a valid sequence, we print "IMPOSSIBLE".

Here is the Python code for this solution:

```python
def solve(n, m, teleporters):
    adj_list = {i: [] for i in range(1, n + 1)}
    for a, b in teleporters:
        adj_list[a].append(b)

    stack = [1]
    visited = {1}

    while stack:
        level = stack.pop()

        if level == n:
            return visited

        for adj_level in adj_list[level]:
            if adj_level not in visited:
                stack.append(adj_level)
                visited.add(adj_level)
                break
        else:
            visited.remove(level)

    return "IMPOSSIBLE"

# Read input
n, m = map(int, input().split())
teleporters = [list(map(int, input().split())) for _ in range(m)]

# Solve the problem
result = solve(n, m, teleporters)

# Print the result
if result == "IMPOSSIBLE":
    print(result)
else:
    print(" ".join(map(str, result)))
```

This solution has a time complexity of O(n + m) since we need to visit each level and teleporter once.