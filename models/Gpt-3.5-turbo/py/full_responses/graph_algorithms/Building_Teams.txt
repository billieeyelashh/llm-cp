To solve this problem, we can use a graph coloring algorithm. We will assign each pupil to one of the two teams, making sure that no two friends are in the same team.

We can represent the friendships between pupils as an adjacency list. Then, we can iterate over each pupil and perform a depth-first search (DFS) to assign the team colors.

Here is the Python implementation:

```python
from collections import defaultdict

def dfs(node, color, graph, colors):
    colors[node] = color
    for neighbor in graph[node]:
        if colors[neighbor] == 0:
            dfs(neighbor, 3 - color, graph, colors)

def divide_teams(n, m, friendships):
    graph = defaultdict(list)
    for a, b in friendships:
        graph[a].append(b)
        graph[b].append(a)

    colors = [0] * (n+1)
    for i in range(1, n+1):
        if colors[i] == 0:
            dfs(i, 1, graph, colors)

    return colors[1:]

# Read input
n, m = map(int, input().split())
friendships = [list(map(int, input().split())) for _ in range(m)]

# Divide teams
teams = divide_teams(n, m, friendships)

# Print the teams
if 0 in teams:
    print("IMPOSSIBLE")
else:
    print(*teams)
```

The time complexity of this solution is O(n + m), where n is the number of pupils and m is the number of friendships. The space complexity is O(n) for the graph and colors arrays.