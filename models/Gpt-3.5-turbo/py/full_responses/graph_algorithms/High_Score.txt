To solve this problem, we can use the Bellman-Ford algorithm. 

First, we initialize an array `dist` of size `n` with all elements set to negative infinity, except for `dist[0]` which is set to 0. This array will store the maximum score we can achieve at each room.

Then, we iterate `n-1` times over all the tunnels and update the `dist` array accordingly. For each tunnel (`a`, `b`, `x`), if `dist[a] + x > dist[b]`, we update `dist[b]` to `dist[a] + x`. This means that we have found a better path to reach room `b` with a higher score.

After the `n-1` iterations, we check if there is a better path in the `n`th iteration. If there is, it means that there is a negative cycle in the graph, and we can achieve an arbitrarily large score. In this case, we print `-1`. Otherwise, we print `dist[n-1]`, which is the maximum score we can achieve.

Here is the Python implementation:

```python
def solve(n, m, tunnels):
    dist = [float('-inf')] * n
    dist[0] = 0

    for _ in range(n-1):
        for a, b, x in tunnels:
            if dist[a-1] + x > dist[b-1]:
                dist[b-1] = dist[a-1] + x
    
    for a, b, x in tunnels:
        if dist[a-1] + x > dist[b-1]:
            return -1

    return dist[n-1]

# Read input
n, m = map(int, input().split())
tunnels = []
for _ in range(m):
    a, b, x = map(int, input().split())
    tunnels.append((a, b, x))

# Solve and print the result
print(solve(n, m, tunnels))
```

This solution has a time complexity of O(nm) since we perform `n-1` iterations over the `m` tunnels.