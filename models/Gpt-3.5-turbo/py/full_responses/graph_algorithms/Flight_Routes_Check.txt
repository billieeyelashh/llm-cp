To solve this problem, we can use the concept of graph traversal. We can represent the flight connections as a directed graph, where each city is a node and each flight is an edge.

We will use depth-first search (DFS) to check if it is possible to travel from any city to any other city. Starting from any city, we will visit all reachable cities using DFS and mark them as visited. After that, if there are any unvisited cities, it means that there is at least one city that cannot be reached from the starting city, and therefore we print "NO" along with any two cities (one from the starting city and one from the unvisited cities).

Here is the Python code to solve the problem:

```python
def dfs(node, graph, visited):
    visited[node] = True
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs(neighbor, graph, visited)

n, m = map(int, input().split())
graph = [[] for _ in range(n + 1)]
for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)

visited = [False] * (n + 1)
dfs(1, graph, visited)

if all(visited[1:]):
    print("YES")
else:
    for city in range(1, n + 1):
        if not visited[city]:
            print("NO")
            print("1", city)
            break
```

Time Complexity Analysis:
The time complexity of this solution is O(n + m), where n is the number of cities and m is the number of flights. This is because we need to iterate through all the flights to build the graph and then perform DFS on the graph.

Overall, this solution efficiently solves the problem by checking if it is possible to travel from any city to any other city using the available flights.