We can solve this problem using the Bellman-Ford algorithm, which is a dynamic programming algorithm that finds the shortest path from a source node to all other nodes in a graph. The algorithm can also detect negative cycles.

Here's the plan:
1. Initialize a distance array dist[] with all values set to infinity, except for the source node which is set to 0.
2. Relax each edge (a, b, c) in the graph for n-1 times, where n is the number of nodes. Relaxing an edge means updating the distance if we find a shorter path.
3. After n-1 iterations, if we can still relax any edge and update the distance, it means there is a negative cycle in the graph.
4. To find the negative cycle, we can perform one more iteration and check if any distance can still be updated. If yes, then we have found a negative cycle.
5. To reconstruct the negative cycle, we can keep track of the parent of each node when relaxing the edges. Starting from any node in the cycle, we can trace back the parent until we reach a node already in the cycle. This will give us the nodes in the negative cycle.

Here's the Python implementation:

```python
def find_negative_cycle(n, m, edges):
    dist = [float('inf')] * (n + 1)
    parent = [-1] * (n + 1)
    cycle = []

    # Step 1: Set the distance of the source node to 0
    dist[1] = 0

    # Step 2: Relax each edge for n-1 times
    for _ in range(n - 1):
        for a, b, c in edges:
            if dist[a] + c < dist[b]:
                dist[b] = dist[a] + c
                parent[b] = a

    # Step 3: Check for negative cycles
    for a, b, c in edges:
        if dist[a] + c < dist[b]:
            # Step 4: Find negative cycle
            x = b
            for _ in range(n):
                x = parent[x]
            y = x
            while True:
                cycle.append(y)
                if y == x and len(cycle) > 1:
                    break
                y = parent[y]
            cycle.reverse()
            return "YES", cycle

    # Step 5: No negative cycle found
    return "NO"

# Read input
n, m = map(int, input().split())
edges = []
for _ in range(m):
    a, b, c = map(int, input().split())
    edges.append((a, b, c))

# Find negative cycle
result = find_negative_cycle(n, m, edges)

# Print output
print(result[0])
if result[0] == "YES":
    print(' '.join(map(str, result[1])))
```

This solution has a time complexity of O(nm), where n is the number of nodes and m is the number of edges.