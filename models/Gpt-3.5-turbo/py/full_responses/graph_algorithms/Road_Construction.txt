To solve this problem, we can use the Union-Find algorithm, also known as the Disjoint Set Union (DSU) data structure. The idea is to maintain a collection of disjoint sets, where each set represents a component.

Here is the Python solution:

```python
class DSU:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x, y = self.find(x), self.find(y)
        if x != y:
            if self.size[x] < self.size[y]:
                x, y = y, x
            self.parent[y] = x
            self.size[x] += self.size[y]

def solve(n, m, roads):
    dsu = DSU(n)
    components = n
    max_component_size = 1
    result = []

    for road in roads:
        a, b = road
        if dsu.find(a-1) != dsu.find(b-1):
            dsu.union(a-1, b-1)
            components -= 1
            max_component_size = max(max_component_size, dsu.size[dsu.find(a-1)])
        result.append((components, max_component_size))

    return result

# Read input
n, m = map(int, input().split())
roads = [list(map(int, input().split())) for _ in range(m)]

# Solve the problem
result = solve(n, m, roads)

# Print the result
for component, max_size in result:
    print(component, max_size)
```

The solution uses a DSU class to keep track of the parent of each city and the size of each component. Initially, each city is its own parent, and the size of each component is 1.

For each road, we check if the two cities are already in the same component. If not, we merge the components by updating the parent and size arrays. We also update the total number of components and the size of the largest component. Finally, we append the current values of components and max_component_size to the result list.

After processing all the roads, we print the results line by line.