To solve this problem, we can follow the following steps:

1. Read the input values: $n$ and $n$ lines of prime factorization.
2. Initialize three variables: `num` to store the number of divisors, `sum_divisors` to store the sum of divisors, and `product_divisors` to store the product of divisors. Initialize all three variables to 1.
3. For each line of prime factorization, multiply `num` by ($k+1$), add $x^k$ to `sum_divisors`, and multiply `product_divisors` by $x^{(k \cdot (k+1))/2}$.
4. Print the three variables modulo $10^9+7$.

Here is the Python implementation of the solution:

```python
MOD = int(1e9+7)

# Step 1
n = int(input())
prime_factorization = [list(map(int, input().split())) for _ in range(n)]

# Step 2
num = 1
sum_divisors = 1
product_divisors = 1

# Step 3
for x, k in prime_factorization:
    num = (num * (k+1)) % MOD
    sum_divisors = (sum_divisors * (pow(x, k+1, MOD) - 1) * pow(x-1, MOD-2, MOD)) % MOD
    product_divisors = (product_divisors * pow(x, (k*(k+1)//2), MOD)) % MOD

# Step 4
print(num, sum_divisors, product_divisors)
```

This solution has a time complexity of $O(n)$, where $n$ is the number of parts in the prime factorization.