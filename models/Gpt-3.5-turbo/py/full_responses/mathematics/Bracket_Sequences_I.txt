To solve this problem, we can use dynamic programming. Let's denote the number of valid bracket sequences of length $n$ as $dp[n]$.

The base cases are:
$dp[0] = 1$ (an empty sequence is valid)
$dp[1] = 1$ (a sequence with a single pair of brackets is valid)

For $n \geq 2$, we can calculate $dp[n]$ as follows:
$dp[n] = dp[0] * dp[n-1] + dp[1] * dp[n-2] + ... + dp[k] * dp[n-k-1] + ... + dp[n-1] * dp[0]$

In other words, we iterate over all possible positions to split the sequence into two parts and multiply the number of valid sequences in each part.

Finally, we return $dp[n]$ modulo $10^9+7$.

Here is the Python code implementing the solution:

```python
MOD = 10**9 + 7

def count_valid_sequences(n):
    dp = [0] * (n+1)
    dp[0] = 1
    dp[1] = 1

    for i in range(2, n+1):
        for j in range(i):
            dp[i] += dp[j] * dp[i-j-1]
            dp[i] %= MOD

    return dp[n]

# Read input
n = int(input())

# Calculate and print the result
result = count_valid_sequences(n)
print(result)
```

This solution has a time complexity of $O(n^2)$ and a space complexity of $O(n)$, where $n$ is the input length.