To count the number of paths from node 1 to node n with exactly k edges, we can use dynamic programming.

Let's define a 2D array dp[i][j] where dp[i][j] represents the number of paths from node 1 to node i using exactly j edges.

The base case is dp[1][0] = 1, which means there is only one path from node 1 to itself using 0 edges.

The recursive formula is dp[i][j] = sum(dp[u][j-1]) for all edges (u, i), where (u, i) is an edge in the graph.

We can compute dp[i][j] for all i and j in a bottom-up manner. The final answer will be dp[n][k].

Here is the Python code:

```python
MOD = int(1e9 + 7)

def count_paths(n, m, k, edges):
    dp = [[0] * (k + 1) for _ in range(n + 1)]
    dp[1][0] = 1

    for j in range(1, k + 1):
        for u, v in edges:
            dp[v][j] = (dp[v][j] + dp[u][j - 1]) % MOD

    return dp[n][k]

# Read input
n, m, k = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(m)]

# Count paths
result = count_paths(n, m, k, edges)

# Print result
print(result)
```

This solution has a time complexity of O(n * m * k) and a space complexity of O(n * k).