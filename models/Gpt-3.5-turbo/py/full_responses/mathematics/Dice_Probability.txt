To solve this problem, we can use dynamic programming to calculate the probability of each possible sum.

Let's define $dp[i][j]$ as the probability of getting a sum of $j$ after $i$ throws of the dice. We can initialize $dp[0][0]$ as $1$, since the probability of getting a sum of $0$ after $0$ throws is $1$.

Now, to calculate $dp[i+1][j]$, we can iterate over all possible outcomes of the $(i+1)$-th throw ($1$ to $6$) and add the probability of each outcome to $dp[i+1][j]$ if $j$ minus the outcome is within the desired range ($a \le j - \text{outcome} \le b$).

Finally, our answer will be the sum of probabilities in $dp[n][a]$ to $dp[n][b]$.

Here's the Python code implementing this approach:

```python
n, a, b = map(int, input().split())

dp = [[0] * (6*n + 1) for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(1, 6*n + 1):
        for k in range(1, 7):
            if j - k >= 0:
                dp[i+1][j] += dp[i][j-k]

total_probability = sum(dp[n][a:b+1])
answer = total_probability / (6**n)

print(f"{answer:.6f}")
```

This solution runs in $O(n \cdot b)$ time and $O(n \cdot b)$ space.