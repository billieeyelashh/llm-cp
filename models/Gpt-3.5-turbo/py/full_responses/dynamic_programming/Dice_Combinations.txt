We can solve this problem using dynamic programming. We will create an array dp of size n+1, where dp[i] represents the number of ways to construct sum i using the dice throws. 

We initialize dp[0] = 1, since there is one way to construct sum 0 (i.e., not throwing the dice at all).

For each i from 1 to n, we iterate through all possible outcomes of throwing the dice (from 1 to 6), and update dp[i] by adding dp[i - j] for each outcome j. This is because if we throw a j on the current turn, the remaining sum to be constructed is i - j, and we already know the number of ways to construct that sum (dp[i - j]).

Finally, we return dp[n] as the answer.

Here's the Python code:

```python
n = int(input())

MOD = int(1e9) + 7
dp = [0] * (n + 1)
dp[0] = 1

for i in range(1, n + 1):
    for j in range(1, 7):
        if j <= i:
            dp[i] = (dp[i] + dp[i - j]) % MOD

print(dp[n])
```

This solution has a time complexity of O(n) and a space complexity of O(n).