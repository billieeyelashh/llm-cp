To count the number of ways to fill an $n \times m$ grid using $1 \times 2$ and $2 \times 1$ tiles, we can use dynamic programming.

Let's define a 2D array dp, where dp[i][j] represents the number of ways to fill a grid of size $i \times j$.

The base cases are:
- dp[1][1] = 1
- dp[1][2] = 1
- dp[2][1] = 1
- dp[2][2] = 2

For any other cell dp[i][j], we have two possible cases:
1. If we place a $1 \times 2$ tile vertically, then the remaining grid will be of size $(i-1) \times j$, and the number of ways to fill it will be dp[i-1][j].
2. If we place a $2 \times 1$ tile horizontally, then the remaining grid will be of size $i \times (j-1)$, and the number of ways to fill it will be dp[i][j-1].

Therefore, the recurrence relation is:
dp[i][j] = dp[i-1][j] + dp[i][j-1]

Finally, the answer will be dp[n][m].

Here's the Python solution:

```python
MOD = int(1e9 + 7)

def count_ways(n, m):
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # Base cases
    dp[1][1] = 1
    dp[1][2] = 1
    dp[2][1] = 1
    dp[2][2] = 2

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if i != 1 or j != 1:  # Skip base cases
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD

    return dp[n][m]

# Read input
n, m = map(int, input().split())

# Calculate and print the number of ways
print(count_ways(n, m))
```

This solution has a time complexity of O(n * m) and a space complexity of O(n * m).