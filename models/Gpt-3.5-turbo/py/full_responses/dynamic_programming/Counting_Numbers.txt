Solution:

To count the number of integers between $a$ and $b$ where no two adjacent digits are the same, we can use dynamic programming. We will define a function $dp(i, j, tight)$ which represents the number of valid integers of length $i$ such that the current digit is $j$ and the previous digit was tight or not.

Let's break down the implementation step by step:

1. Convert $a$ and $b$ to strings.
2. Initialize a 3D table $dp$ with dimensions $[19][10][2]$. The first dimension represents the length of the number (up to 18 digits), the second dimension represents the current digit (0-9), and the third dimension represents whether the previous digit was tight (0 or 1).
3. Implement a recursive function $countDigits(i, prev, tight)$ which calculates the number of valid integers of length $i$ given the previous digit $prev$ and whether the previous digit was tight or not.
   1. If $i$ is equal to the length of $b$, return 1 (since we have reached the end of the range).
   2. If $dp[i][prev][tight]$ is already calculated, return $dp[i][prev][tight]$.
   3. Initialize $result$ as 0.
   4. For each digit $d$ from 0 to 9:
      1. If $d$ is equal to $prev$ and tight is True, continue to the next iteration (as adjacent digits cannot be the same).
      2. If $tight$ is False and $d$ is greater than the corresponding digit in $b$, continue to the next iteration (as we cannot exceed the upper limit).
      3. If $tight$ is True and $d$ is greater than the corresponding digit in $a$, continue to the next iteration (as we cannot go below the lower limit).
      4. Set the next value of $tight$ based on whether $d$ is equal to the corresponding digit in $a$ or $b$.
      5. Add $countDigits(i+1, d, tight)$ to $result$.
   5. Store $result$ in $dp[i][prev][tight]$ and return it.
4. Call the $countDigits$ function with initial parameters $i=0$, $prev=-1$, and $tight=True$.
5. Subtract 1 from the final result (since we included the number $a$ itself in the count).
6. Print the final result.

Python code:

```python
a, b = map(int, input().split())
a_str = str(a)
b_str = str(b)
n = len(b_str)

dp = [[[0] * 2 for _ in range(10)] for _ in range(n+1)]

def countDigits(i, prev, tight):
    if i == n:
        return 1

    if dp[i][prev][tight] != 0:
        return dp[i][prev][tight]

    result = 0
    for d in range(10):
        if d == prev and tight:
            continue
        if not tight and d > int(b_str[i]):
            continue
        if tight and d < int(a_str[i]):
            continue

        next_tight = tight and (d == int(a_str[i])) and (d == int(b_str[i]))
        result += countDigits(i+1, d, next_tight)

    dp[i][prev][tight] = result
    return result

result = countDigits(0, -1, True)
result -= 1
print(result)
```

Time complexity: $O(\log b)$
Space complexity: $O(\log b)$