Solution:

We can solve this problem using dynamic programming.

Let's define an array `dp` of size `n`, where `dp[i]` represents the length of the longest increasing subsequence ending at index `i`.

Initialize `dp` to all 1s, as every element in the array is a subsequence of length 1.

Then, for each index `i` from 1 to `n-1`, we iterate over all indices `j` from 0 to `i-1`. If `arr[i] > arr[j]`, it means that we can extend the increasing subsequence ending at index `j` by including the element at index `i`, resulting in a longer increasing subsequence ending at index `i`. So, we update `dp[i]` to be the maximum of `dp[i]` and `dp[j] + 1`.

Finally, the maximum value in the `dp` array will represent the length of the longest increasing subsequence in the given array.

Here is the Python code for the solution:

```python
def longest_increasing_subsequence(arr, n):
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)

# Read input
n = int(input())
arr = list(map(int, input().split()))

# Call the function and print the result
print(longest_increasing_subsequence(arr, n))
```

This solution has a time complexity of O(n^2), where n is the size of the array.