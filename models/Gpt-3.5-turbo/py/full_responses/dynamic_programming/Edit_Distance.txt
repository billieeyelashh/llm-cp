To solve this problem, we can use a dynamic programming approach. We will create a matrix of size (n+1) x (m+1), where n and m are the lengths of the two strings.

Let's define dp[i][j] as the minimum edit distance between the first i characters of the first string and the first j characters of the second string.

We can compute dp[i][j] using the following recurrence relation:

- If the i-th character of the first string is equal to the j-th character of the second string, then dp[i][j] = dp[i-1][j-1]. No operation is needed in this case.

- Otherwise, we have three options:
  1. Add one character to the first string: dp[i][j] = dp[i][j-1] + 1.
  2. Remove one character from the first string: dp[i][j] = dp[i-1][j] + 1.
  3. Replace one character in the first string: dp[i][j] = dp[i-1][j-1] + 1.

The final answer will be dp[n][m], where n and m are the lengths of the two strings.

Here is the Python code for the solution:

```python
def edit_distance(s1, s2):
    n = len(s1)
    m = len(s2)
    
    # Initialize the dp matrix
    dp = [[0] * (m+1) for _ in range(n+1)]
    
    # Fill in the base cases
    for i in range(n+1):
        dp[i][0] = i
    for j in range(m+1):
        dp[0][j] = j
    
    # Compute the edit distance
    for i in range(1, n+1):
        for j in range(1, m+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i][j-1] + 1, dp[i-1][j] + 1, dp[i-1][j-1] + 1)
    
    return dp[n][m]

# Read the input strings
s1 = input().strip()
s2 = input().strip()

# Compute and print the edit distance
print(edit_distance(s1, s2))
```

This solution has a time complexity of O(n * m), where n and m are the lengths of the two strings.