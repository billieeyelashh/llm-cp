To solve this problem optimally, we can use the Hungarian Algorithm, also known as the Kuhn-Munkres algorithm. This algorithm finds the optimal assignment of tasks to employees in polynomial time.

First, we need to build an initial cost matrix from the input. We will represent the matrix as a 2D vector in C++.

Next, we apply the Hungarian algorithm to find the minimum cost assignment. The algorithm consists of the following steps:

1. Subtract the smallest element in each row from all elements in that row.
2. Subtract the smallest element in each column from all elements in that column.
3. Find a complete assignment of tasks to employees with the minimum total cost.
4. If the assignment is not complete, find the smallest uncovered element and subtract it from all uncovered elements. Then, add it to all elements covered by two lines. Go back to step 3.
5. If the assignment is complete, we have found the minimum total cost.

Here is the C++ code to solve the problem using the Hungarian algorithm:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 1e9;

int hungarian(const vector<vector<int>>& cost_matrix) {
    int n = cost_matrix.size();
    vector<int> u(n + 1), v(n + 1), p(n + 1), way(n + 1);

    for (int i = 1; i <= n; ++i) {
        p[0] = i;
        int j0 = 0;
        vector<int> minv(n + 1, INF);
        vector<bool> used(n + 1, false);

        do {
            used[j0] = true;
            int i0 = p[j0], delta = INF, j1;

            for (int j = 1; j <= n; ++j) {
                if (!used[j]) {
                    int cur = cost_matrix[i0 - 1][j - 1] - u[i0] - v[j];
                    if (cur < minv[j]) {
                        minv[j] = cur;
                        way[j] = j0;
                    }
                    if (minv[j] < delta) {
                        delta = minv[j];
                        j1 = j;
                    }
                }
            }

            for (int j = 0; j <= n; ++j) {
                if (used[j]) {
                    u[p[j]] += delta;
                    v[j] -= delta;
                } else {
                    minv[j] -= delta;
                }
            }

            j0 = j1;
        } while (p[j0] != 0);

        do {
            int j1 = way[j0];
            p[j0] = p[j1];
            j0 = j1;
        } while (j0 != 0);
    }

    return -v[0];
}

void print_assignment(const vector<vector<int>>& cost_matrix) {
    int n = cost_matrix.size();
    vector<int> assignment(n + 1);

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (assignment[j] == 0 || cost_matrix[i - 1][j - 1] - u[i] - v[j] < cost_matrix[assignment[j] - 1][j - 1] - u[assignment[j]] - v[j]) {
                assignment[j] = i;
            }
        }
    }

    cout << hungarian(cost_matrix) << endl;
    for (int j = 1; j <= n; ++j) {
        cout << assignment[j] << " " << j << endl;
    }
}

int main() {
    int n;
    cin >> n;
    vector<vector<int>> cost_matrix(n, vector<int>(n));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> cost_matrix[i][j];
        }
    }

    print_assignment(cost_matrix);

    return 0;
}
```

This code reads the input, builds the cost matrix, and then calls the `print_assignment` function to find the optimal assignment and print the result.

The time complexity of this solution is O(n^3), where n is the number of employees/tasks.