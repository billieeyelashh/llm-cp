To solve this problem, we can use a graph representation and perform a depth-first search (DFS) to find the necessary cities.

First, we create an adjacency list to represent the graph. We can use a vector of vectors to store the adjacency list.

Next, we perform a DFS starting from each city to visit all its adjacent cities. During the DFS, we mark the visited cities.

After performing the DFS for all cities, we iterate through the cities again and check if there are any unvisited cities. If a city is unvisited, it means removing that city will disconnect some other cities, making it necessary.

Finally, we output the number of necessary cities and print their indices.

Here is the C++ implementation:

```cpp
#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> adj;
vector<bool> visited;

void dfs(int v) {
    visited[v] = true;
    for (int u : adj[v]) {
        if (!visited[u]) {
            dfs(u);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    adj.resize(n + 1);
    visited.resize(n + 1, false);

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i);
        }
    }

    vector<int> necessaryCities;
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            necessaryCities.push_back(i);
        }
    }

    cout << necessaryCities.size() << endl;
    for (int city : necessaryCities) {
        cout << city << " ";
    }
    cout << endl;

    return 0;
}
```

This solution has a time complexity of O(n + m), where n is the number of cities and m is the number of roads.