To solve this problem optimally, we can use the sliding window technique. We will maintain a running sum of products as we slide the mask through the signal.

Here is the C++ code to solve the problem:

```cpp
#include <iostream>
#include <vector>

using namespace std;

vector<int> calculateSignalProduct(const vector<int>& signal, const vector<int>& mask) {
    int n = signal.size();
    int m = mask.size();
    vector<int> result(n + m - 1, 0);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            result[i + j] += signal[i] * mask[j];
        }
    }

    return result;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<int> signal(n);
    for (int i = 0; i < n; i++) {
        cin >> signal[i];
    }

    vector<int> mask(m);
    for (int i = 0; i < m; i++) {
        cin >> mask[i];
    }

    vector<int> result = calculateSignalProduct(signal, mask);

    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}
```

The `calculateSignalProduct` function takes in the signal and mask as input and returns a vector containing the sum of products at each mask position.

We iterate through each element of the signal and mask using nested loops. At each position, we multiply the corresponding signal and mask values and add it to the appropriate position in the result vector.

Finally, we print the elements of the result vector separated by spaces.

The time complexity of this solution is O(n * m), where n is the length of the signal and m is the length of the mask.