To solve this problem efficiently, we can perform the reverse operations in reverse order. Initially, we start with the original string and apply the last operation, then the second-to-last operation, and so on until we apply the first operation.

Here's the C++ code to solve the problem:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    string s;
    cin >> s;

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;

        reverse(s.begin() + a - 1, s.begin() + b);
    }

    cout << s << endl;

    return 0;
}
```

Explanation:
1. Read the values of `n` and `m` from the input.
2. Read the string `s` from the input.
3. Loop through each operation:
   - Read the values of `a` and `b` from the input.
   - Reverse the substring from position `a` to `b` using the `reverse` function from the `<algorithm>` library.
4. Print the final string `s`.

The time complexity of this solution is O(n + m), where n is the length of the string and m is the number of operations. This is because we perform a constant time operation for each character in the string and for each operation.