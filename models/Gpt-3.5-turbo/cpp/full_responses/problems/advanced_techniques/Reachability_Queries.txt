To solve this problem efficiently, we can use the Depth First Search (DFS) algorithm to traverse the graph and check if there is a path from node $a$ to node $b$.

First, we need to represent the graph using an adjacency list. We can use a vector of vectors to store the neighbors of each node. Let's call this adjacency list `adj`.

Next, we can define a recursive function `dfs` that takes two parameters: the current node `cur` and the target node `target`. In this function, we will perform a DFS traversal of the graph starting from the current node.

Here is the C++ code that solves the problem:

```cpp
#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> adj;
vector<bool> visited;

void dfs(int cur, int target) {
    visited[cur] = true;
    
    if (cur == target) {
        return;
    }
    
    for (int neighbor : adj[cur]) {
        if (!visited[neighbor]) {
            dfs(neighbor, target);
        }
    }
}

int main() {
    int n, m, q;
    cin >> n >> m >> q;
    
    adj.resize(n + 1);
    visited.resize(n + 1);
    
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
    }
    
    for (int i = 0; i < q; i++) {
        int a, b;
        cin >> a >> b;
        
        // Reset visited array for each query
        fill(visited.begin(), visited.end(), false);
        
        dfs(a, b);
        
        if (visited[b]) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }
    
    return 0;
}
```

The time complexity of this solution is $O(n + m + q)$, where $n$ is the number of nodes, $m$ is the number of edges, and $q$ is the number of queries. This is because we need to traverse all the edges in the graph to build the adjacency list, and for each query, we perform a DFS traversal of the graph.