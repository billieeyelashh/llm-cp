To solve this problem optimally, we can use the binary search algorithm.

1. Initialize two variables, `left` and `right`, to keep track of the range of possible weights for the coins.

2. For each move, update the range of possible weights based on the move:

   - If the coin is moved to the left stack, update `right` to be the weight of the coin minus 1.
   - If the coin is moved to the right stack, update `left` to be the weight of the coin plus 1.

3. After each move, check if the range of possible weights is empty. If it is, output "?" to indicate that we cannot determine which stack is heavier.

4. If the range of possible weights is not empty, compare the values of `left` and `right`:

   - If `left` is greater than `right`, output "<" to indicate that the left stack is heavier.
   - If `left` is less than `right`, output ">" to indicate that the right stack is heavier.
   - Otherwise, output "?" to indicate that we cannot determine which stack is heavier.

Here is the C++ code for the solution:

```cpp
#include <iostream>

using namespace std;

int main() {
    int n;
    cin >> n;

    int left = 1, right = n;

    for (int i = 0; i < n; i++) {
        int c, s;
        cin >> c >> s;

        if (s == 1) {
            right = c - 1;
        } else {
            left = c + 1;
        }

        if (left > right) {
            cout << "<\n";
        } else if (left < right) {
            cout << ">\n";
        } else {
            cout << "?\n";
        }
    }

    return 0;
}
```

This solution has a time complexity of O(n) because we perform a constant number of operations for each move.