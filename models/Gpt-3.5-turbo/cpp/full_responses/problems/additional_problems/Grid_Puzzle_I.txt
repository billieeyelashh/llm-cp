To solve this problem, we can use a greedy approach. We will iterate over each cell in the grid and make a decision whether to choose it or not based on the row and column constraints.

Here's the C++ code that solves the problem:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> row_constraints(n), col_constraints(n);
    for (int i = 0; i < n; ++i) {
        cin >> row_constraints[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> col_constraints[i];
    }

    vector<vector<char>> grid(n, vector<char>(n, '.'));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (row_constraints[i] > 0 && col_constraints[j] > 0) {
                grid[i][j] = 'X';
                row_constraints[i]--;
                col_constraints[j]--;
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        if (row_constraints[i] > 0 || col_constraints[i] > 0) {
            cout << -1 << endl;
            return 0;
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << grid[i][j];
        }
        cout << endl;
    }

    return 0;
}
```

The code reads the input, initializes an empty grid, and then iterates over each cell of the grid. If both the row and column constraints are positive, we mark that cell as chosen ('X') and decrement the corresponding row and column constraints. After the iteration, we check if any row or column constraints are not satisfied, and if so, we print -1. Otherwise, we print the final grid.

The time complexity of this solution is O(n^2), where n is the size of the grid.