To solve this problem, we can follow a greedy approach. We'll start by sorting the players based on the number of games they want to play in non-decreasing order.

Next, we'll iterate through the sorted list of players and assign games to them. For each player, we'll check if there are still enough players available to play the desired number of games. If there are, we'll assign games to the current player by pairing them with the subsequent players until the desired number of games is reached.

Here's the implementation in C++:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> players; // (number of games, player number)

    for (int i = 1; i <= n; ++i) {
        int x;
        cin >> x;
        players.push_back({x, i});
    }

    sort(players.begin(), players.end());

    vector<pair<int, int>> games;

    for (int i = 0; i < n; ++i) {
        int numGames = players[i].first;
        int player = players[i].second;

        for (int j = 0; j < numGames; ++j) {
            if (i + j + 1 >= n) {
                cout << "IMPOSSIBLE" << endl;
                return 0;
            }

            int opponent = players[i + j + 1].second;
            games.push_back({player, opponent});
        }
    }

    cout << games.size() << endl;
    for (auto& game : games) {
        cout << game.first << " " << game.second << endl;
    }

    return 0;
}
```

This solution has a time complexity of O(n log n) due to the sorting operation.