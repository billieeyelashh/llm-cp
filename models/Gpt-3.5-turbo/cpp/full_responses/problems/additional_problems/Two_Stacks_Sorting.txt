To solve this problem optimally, we can use two stacks and a variable to keep track of the current number that should be moved from the input list.

Here is the step-by-step solution in C++:

```cpp
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> input(n);
    for (int i = 0; i < n; ++i) {
        cin >> input[i];
    }

    stack<int> stack1, stack2;
    int current = 1;

    vector<int> output(n);

    for (int i = 0; i < n; ++i) {
        int num = input[i];

        if (num < current) {
            if (!stack1.empty() && stack1.top() < num) {
                cout << "IMPOSSIBLE" << endl;
                return 0;
            }

            stack1.push(num);
            output[i] = 1;
        } else {
            if (stack1.empty() || stack1.top() != current) {
                cout << "IMPOSSIBLE" << endl;
                return 0;
            }

            stack1.pop();
            output[i] = 2;
            ++current;
        }
    }

    while (!stack2.empty()) {
        if (stack2.top() != current) {
            cout << "IMPOSSIBLE" << endl;
            return 0;
        }

        stack2.pop();
        output[n - stack2.size() - 1] = 2;
        ++current;
    }

    for (int i = 0; i < n; ++i) {
        cout << output[i] << " ";
    }
    cout << endl;

    return 0;
}
```

The algorithm works as follows:
1. Read the input values and initialize the necessary variables.
2. Iterate over the input list.
3. If the current number is less than the expected number, push it into stack1 and mark it as moved to stack1.
4. If the current number is equal to the expected number, pop the top element from stack1 (if it exists) and mark it as moved to stack2. Increment the expected number.
5. After iterating over all the input numbers, check if there are any remaining elements in stack2. If there are, pop them one by one and mark them as moved to stack2.
6. Print the output list.

The time complexity of this solution is O(n), where n is the number of elements in the input list.