To solve this problem, we can use backtracking to try all possible configurations of filling the empty squares in the grid. 

We will define a recursive function `fillGrid` that takes the current row and column as parameters. The function will check if we have reached the end of the grid (i.e., `row == n`) and return 1 if that's the case. If not, it will check if the current square is empty or already filled. If it's already filled, it will move to the next square. If it's empty, it will try filling it with 'A' and 'B' and move to the next square recursively. 

To optimize the solution, we will also use a memoization technique to store the number of ways for each configuration of the grid that we have already calculated. This way, we avoid recalculating the same configurations multiple times.

Here's the C++ code for the solution:

```cpp
#include <iostream>
#include <vector>

using namespace std;

const int MOD = 1e9 + 7;

int n;
vector<string> grid;
vector<vector<int>> memo;

int fillGrid(int row, int col) {
    if (row == n) {
        return 1;
    }

    if (col == n) {
        return fillGrid(row + 1, 0);
    }

    if (memo[row][col] != -1) {
        return memo[row][col];
    }

    int ways = 0;

    if (grid[row][col] == '.') {
        // Try filling with 'A'
        grid[row][col] = 'A';
        ways += fillGrid(row, col + 1);
        ways %= MOD;
        // Try filling with 'B'
        grid[row][col] = 'B';
        ways += fillGrid(row, col + 1);
        ways %= MOD;
        // Reset the square back to empty
        grid[row][col] = '.';
    } else {
        // Move to the next square
        ways = fillGrid(row, col + 1);
    }

    return memo[row][col] = ways;
}

int main() {
    cin >> n;

    grid.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> grid[i];
    }

    memo.assign(n, vector<int>(n, -1));

    int ways = fillGrid(0, 0);
    cout << ways << endl;

    return 0;
}
```

The solution has a time complexity of O(n^2) since we are trying all possible configurations of filling the grid. The memoization technique helps reduce the number of recursive calls and improves the overall efficiency of the solution.