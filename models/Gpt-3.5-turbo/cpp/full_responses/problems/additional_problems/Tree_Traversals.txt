We can solve this problem using recursion and divide-and-conquer approach.

First, we need to find the root of the tree. In the preorder traversal, the first element is always the root. We can find the index of the root value in the inorder traversal. Let's call this index `rootIndex`.

Next, we can split the inorder traversal into two parts: the left subtree and the right subtree. The left subtree consists of elements from index 0 to `rootIndex - 1`, and the right subtree consists of elements from index `rootIndex + 1` to the end.

Similarly, we can split the preorder traversal into two parts: the left subtree and the right subtree. The left subtree consists of elements from index 1 to `rootIndex`, and the right subtree consists of elements from index `rootIndex + 1` to the end.

Now, we can recursively solve the problem for the left subtree and the right subtree. The postorder traversal of the tree will be the concatenation of the postorder traversal of the left subtree, the postorder traversal of the right subtree, and the root value.

Here's the C++ code to implement this solution:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

vector<int> postorder;
unordered_map<int, int> inorderIndices;

void buildPostorder(vector<int>& preorder, int preStart, int preEnd, int inStart, int inEnd) {
    if (preStart > preEnd || inStart > inEnd) {
        return;
    }
    
    int rootValue = preorder[preStart];
    int rootIndex = inorderIndices[rootValue];
    
    buildPostorder(preorder, preStart + 1, preStart + (rootIndex - inStart), inStart, rootIndex - 1);
    buildPostorder(preorder, preStart + (rootIndex - inStart) + 1, preEnd, rootIndex + 1, inEnd);
    
    postorder.push_back(rootValue);
}

vector<int> getPostorder(vector<int>& preorder, vector<int>& inorder) {
    int n = preorder.size();
    
    // Store the indices of elements in the inorder traversal
    for (int i = 0; i < n; i++) {
        inorderIndices[inorder[i]] = i;
    }
    
    buildPostorder(preorder, 0, n - 1, 0, n - 1);
    
    return postorder;
}

int main() {
    int n;
    cin >> n;
    
    vector<int> preorder(n);
    vector<int> inorder(n);
    
    for (int i = 0; i < n; i++) {
        cin >> preorder[i];
    }
    
    for (int i = 0; i < n; i++) {
        cin >> inorder[i];
    }
    
    vector<int> result = getPostorder(preorder, inorder);
    
    for (int i = 0; i < n; i++) {
        cout << result[i] << " ";
    }
    
    cout << endl;
    
    return 0;
}
```

This solution has a time complexity of O(n), where n is the number of nodes in the binary tree.