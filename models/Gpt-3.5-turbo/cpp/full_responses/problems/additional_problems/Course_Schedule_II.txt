To solve this problem, we can use a variation of topological sorting. We can represent the requirements as a directed graph, where each course is a node and each requirement is an edge from one course to another.

First, we need to read the input and create an adjacency list to represent the graph. We can use a vector of vectors to store the adjacency list.

Next, we can use depth-first search (DFS) to perform topological sorting. We will start the DFS from course 1 and keep track of the order in which the courses are completed. We will also mark each course as visited to avoid revisiting.

Here is the C++ code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

vector<vector<int>> graph;
vector<bool> visited;
vector<int> order;

void dfs(int course) {
    visited[course] = true;
    
    for (int nextCourse : graph[course]) {
        if (!visited[nextCourse]) {
            dfs(nextCourse);
        }
    }
    
    order.push_back(course);
}

int main() {
    int n, m;
    cin >> n >> m;
    
    graph.resize(n + 1);
    visited.resize(n + 1, false);
    
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
    }
    
    dfs(1);
    
    for (int i = n - 1; i >= 0; i--) {
        cout << order[i] << " ";
    }
    
    return 0;
}
```

The time complexity of this solution is O(n + m), where n is the number of courses and m is the number of requirements.