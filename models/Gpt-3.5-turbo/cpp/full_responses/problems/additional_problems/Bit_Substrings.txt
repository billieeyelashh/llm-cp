To solve this problem optimally, we can use a prefix sum approach.

First, we initialize an array `prefix_sum` of size `n+1` with all elements initialized to 0. This array will store the prefix sum of ones in the given string.

Next, we iterate through the string from left to right and calculate the prefix sum at each position. If the current character is '1', we increment the prefix sum by 1. Otherwise, we leave it unchanged.

After calculating the prefix sum array, we can iterate through it again to count the number of substrings for each value of `k`. For each position `i`, the number of substrings that contain exactly `k` ones is equal to the difference between the current prefix sum and the prefix sum at position `i-k`.

Finally, we print the counts for each `k` value.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    string s;
    cin >> s;
    int n = s.length();

    vector<int> prefix_sum(n+1, 0);
    for (int i = 0; i < n; i++) {
        prefix_sum[i+1] = prefix_sum[i] + (s[i] == '1' ? 1 : 0);
    }

    vector<int> counts(n+1, 0);
    for (int i = 0; i <= n; i++) {
        for (int j = i; j <= n; j++) {
            counts[prefix_sum[j] - prefix_sum[i]]++;
        }
    }

    for (int i = 0; i <= n; i++) {
        cout << counts[i] << " ";
    }

    return 0;
}
```

This solution has a time complexity of O(n^2) as we have two nested loops iterating over the string. However, given the constraints of the problem, this solution will run efficiently within the time limits.