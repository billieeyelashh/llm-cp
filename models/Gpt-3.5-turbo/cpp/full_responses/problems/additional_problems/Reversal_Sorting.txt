To solve this problem optimally, we can use the following approach:

1. Initialize a list `reversals` to store the reversals.
2. Iterate through each number `i` from `n` to 1.
3. If the number `i` is not at its correct position (i.e., `array[i-1] != i`), find the index `j` of `i` in the array.
4. Append the reversal `(j, i)` to `reversals`.
5. Reverse the subarray from index `j` to index `i` in the array.
6. Repeat steps 3-5 until `i` becomes 1.
7. Print the number of reversals `k` (equal to the size of `reversals`).
8. Iterate through `reversals` and print each reversal on a new line.

Here is the C++ implementation of the above approach:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    vector<int> array(n);
    for (int i = 0; i < n; i++) {
        cin >> array[i];
    }
    
    vector<pair<int, int>> reversals;
    for (int i = n; i >= 1; i--) {
        if (array[i-1] != i) {
            int j = i;
            while (array[j-1] != i) {
                j--;
            }
            reversals.push_back({j, i});
            reverse(array.begin() + j - 1, array.begin() + i);
        }
    }
    
    cout << reversals.size() << endl;
    for (auto reversal : reversals) {
        cout << reversal.first << " " << reversal.second << endl;
    }
    
    return 0;
}
```

This solution has a time complexity of O(n^2) and a space complexity of O(n) due to the use of the `reversals` vector.