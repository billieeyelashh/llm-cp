To solve this problem optimally, we can keep track of the robot's current position at each step. We can use a set data structure to store all the visited positions and check if the current position has been visited before. If it has, we stop the robot and return the total distance traveled.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <set>
using namespace std;

int main() {
    int n;
    cin >> n;

    int totalDistance = 0;
    int x = 0, y = 0;
    set<pair<int, int>> visitedPositions;
    visitedPositions.insert({x, y});

    for (int i = 0; i < n; i++) {
        char d;
        int distance;
        cin >> d >> distance;

        if (d == 'U') {
            y += distance;
        } else if (d == 'D') {
            y -= distance;
        } else if (d == 'L') {
            x -= distance;
        } else if (d == 'R') {
            x += distance;
        }

        if (visitedPositions.count({x, y}) > 0) {
            break;
        }

        visitedPositions.insert({x, y});
        totalDistance += distance;
    }

    cout << totalDistance << endl;

    return 0;
}
```

The time complexity of this solution is O(n), where n is the number of commands. This is because we iterate through all the commands once and perform constant time operations for each command.