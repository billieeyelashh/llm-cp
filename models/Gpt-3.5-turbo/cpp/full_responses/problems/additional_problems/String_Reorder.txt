To solve this problem, we can use a greedy approach. 

First, we need to count the frequency of each character in the given string. We can use an array or map to store this information.

Next, we can initialize an empty result string and a priority queue (min heap) to store the characters based on their frequencies. The characters with higher frequencies should come first in the queue.

Now, we can iterate until the priority queue is empty. In each iteration, we remove the character with the highest frequency from the queue and append it to the result string. Then, we decrease its frequency by 1 and push it back into the queue if its frequency is still greater than 0.

If at any point, the queue becomes empty but the result string is not complete, it means it is not possible to create a string with no two adjacent characters being the same. In such cases, we can print -1 as the output.

Finally, we can print the lexicographically minimal reordered string as the output.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <queue>
#include <map>
using namespace std;

string reorderString(string s) {
    int n = s.length();
    
    // Count the frequency of each character
    map<char, int> freq;
    for(char c : s) {
        freq[c]++;
    }
    
    // Initialize result string and priority queue
    string result = "";
    priority_queue<pair<int, char>> pq;
    
    // Push characters into priority queue based on their frequencies
    for(auto it : freq) {
        pq.push({it.second, it.first});
    }
    
    // Reorder the string
    while(!pq.empty()) {
        pair<int, char> curr = pq.top();
        pq.pop();
        
        // Append the character to the result string
        result += curr.second;
        
        // Decrease the frequency by 1
        curr.first--;
        
        // Push the character back into the priority queue if its frequency is still greater than 0
        if(curr.first > 0) {
            pq.push(curr);
        }
    }
    
    // If the result string is not complete, it is not possible to create a valid string
    if(result.length() != n) {
        return "-1";
    }
    
    return result;
}

int main() {
    string s;
    cin >> s;
    
    string result = reorderString(s);
    cout << result << endl;
    
    return 0;
}
```

This solution has a time complexity of O(n log k), where n is the length of the input string and k is the number of distinct characters in the string.