To solve this problem efficiently, we can use a segment tree data structure. A segment tree allows us to perform range updates and range queries in logarithmic time complexity.

Here's the step-by-step solution:

1. Define a segment tree data structure with an array of size $4n$ to store the segment tree nodes.

2. Implement two functions: build and update.

3. In the build function, recursively build the segment tree by dividing the array into smaller segments. Set the leaf nodes to the initial array values.

4. In the update function, recursively update the segment tree based on the given query type. For query type 1, increase each value in the range $[a,b]$ by $x$. For query type 2, set each value in the range $[a,b]$ to $x$. Update the corresponding segment tree nodes accordingly.

5. Implement a function query to calculate the sum of values in the range $[a,b]$. This function will traverse the segment tree and return the sum of the relevant nodes.

6. Process each query line by calling the update or query function accordingly.

7. Print the answer to each sum query.

Here's the final solution in C++:

```cpp
#include <iostream>
#include <vector>

using namespace std;

vector<long long> tree;

void build(vector<long long>& arr, int v, int tl, int tr) {
    if (tl == tr) {
        tree[v] = arr[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(arr, v * 2, tl, tm);
        build(arr, v * 2 + 1, tm + 1, tr);
        tree[v] = tree[v * 2] + tree[v * 2 + 1];
    }
}

void update(int v, int tl, int tr, int l, int r, int x, int type) {
    if (l > r)
        return;
    if (l == tl && r == tr) {
        if (type == 1)
            tree[v] += x;
        else
            tree[v] = x * (r - l + 1);
    } else {
        int tm = (tl + tr) / 2;
        update(v * 2, tl, tm, l, min(r, tm), x, type);
        update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x, type);
        tree[v] = tree[v * 2] + tree[v * 2 + 1];
    }
}

long long query(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return 0;
    if (l == tl && r == tr)
        return tree[v];
    int tm = (tl + tr) / 2;
    return query(v * 2, tl, tm, l, min(r, tm)) +
           query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
}

int main() {
    int n, q;
    cin >> n >> q;

    vector<long long> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    tree.resize(4 * n);
    build(arr, 1, 0, n - 1);

    while (q--) {
        int type, a, b, x;
        cin >> type >> a >> b;
        if (type == 1 || type == 2) {
            cin >> x;
            update(1, 0, n - 1, a - 1, b - 1, x, type);
        } else {
            cout << query(1, 0, n - 1, a - 1, b - 1) << endl;
        }
    }

    return 0;
}
```

This solution builds the segment tree in $O(n)$ time and processes each query in $O(\log n)$ time. Therefore, the total time complexity is $O((n+q)\log n)$.