We can solve this problem efficiently using prefix sums. 

First, we will preprocess the forest grid to calculate a prefix sum grid, where each cell stores the cumulative number of trees from the upper-left corner of the grid to that cell.

To calculate the prefix sum grid, we can iterate over each row and column of the grid, and for each cell, we add the number of trees in that cell to the sum of the cell above it and the cell to the left of it, and subtract the number of trees in the cell diagonally above and to the left. This operation can be done in constant time.

Next, for each query, we can use the prefix sum grid to calculate the number of trees inside the given rectangle. We subtract the cumulative sum of the cells above and to the left of the rectangle from the cumulative sum of the cells above and to the left of the rectangle's bottom-right corner. We add back the cumulative sum of the cells above the rectangle's top-right corner, as this region was subtracted twice. Finally, we add the number of trees in the bottom-right corner of the rectangle.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n, q;
    cin >> n >> q;

    vector<vector<int>> forest(n+1, vector<int>(n+1, 0));

    // Read forest grid
    for (int i = 1; i <= n; i++) {
        string row;
        cin >> row;
        for (int j = 1; j <= n; j++) {
            forest[i][j] = (row[j-1] == '*') ? 1 : 0;
        }
    }

    // Calculate prefix sum grid
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            forest[i][j] += forest[i-1][j] + forest[i][j-1] - forest[i-1][j-1];
        }
    }

    // Process queries
    for (int query = 0; query < q; query++) {
        int y1, x1, y2, x2;
        cin >> y1 >> x1 >> y2 >> x2;

        int treesInsideRectangle = forest[y2][x2] - forest[y2][x1-1] - forest[y1-1][x2] + forest[y1-1][x1-1];
        cout << treesInsideRectangle << endl;
    }

    return 0;
}
```

This solution has a time complexity of O(n^2) for preprocessing the grid and O(q) for processing the queries, resulting in an overall time complexity of O(n^2 + q).