To solve this problem, we can use a data structure called a deque (double-ended queue) in C++. 

Here is the step-by-step solution:

1. Read the input values: n, the initial size of the list; the contents of the list (x1, x2, ..., xn); and the positions of the elements to be removed (p1, p2, ..., pn).

2. Create an empty deque to store the elements of the list.

3. Iterate over the contents of the list:
   - Append each element xi to the back of the deque.

4. Iterate over the positions to be removed:
   - Remove the element at position pi from the front of the deque.
   - Print the removed element.

And here is the C++ code for the solution:

```cpp
#include <iostream>
#include <deque>

using namespace std;

int main() {
    int n;
    cin >> n;

    deque<int> lst;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        lst.push_back(x);
    }

    for (int i = 0; i < n; i++) {
        int p;
        cin >> p;
        cout << lst[p-1] << " ";
        lst.erase(lst.begin() + (p-1));
    }

    return 0;
}
```

This solution has a time complexity of O(n), where n is the initial size of the list.