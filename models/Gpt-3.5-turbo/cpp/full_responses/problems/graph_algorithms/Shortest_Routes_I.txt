To solve this problem, we can use Dijkstra's algorithm to find the shortest route from Syrjälä to every city.

First, we create a graph data structure to represent the flight connections. We can use an adjacency list to store the flights, where each node in the adjacency list contains the city it leads to and the length of the flight.

Next, we initialize an array called "dist" with a size of n, which represents the shortest route lengths from Syrjälä to each city. We set all elements of "dist" to a very large value initially, except for the first element, which represents Syrjälä. We set dist[1] = 0.

We also initialize a priority queue called "pq" to store the cities we need to visit. Each element in the priority queue is a pair (distance, city), where distance is the current shortest route length from Syrjälä to the city.

We start by inserting the pair (0, 1) into the priority queue, representing Syrjälä with a distance of 0.

Then, we repeatedly extract the minimum element from the priority queue. Let's call this element u. We iterate over all flights starting from city u and update the shortest route length to the destination city if a shorter route is found. If the new route is shorter, we insert the updated pair (distance, city) into the priority queue.

Finally, after all cities have been processed, we print the elements of the "dist" array, which represent the shortest route lengths from Syrjälä to each city.

Here is the C++ code that implements the solution:

```cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int INF = 1e9;

vector<vector<pair<int, int>>> graph; // adjacency list representation of the flights

void dijkstra(int n) {
    vector<int> dist(n, INF); // initialize all distances to INF
    dist[0] = 0; // distance from Syrjälä to itself is 0

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, 0}); // insert (distance, city) pair into the priority queue

    while (!pq.empty()) {
        int currDist = pq.top().first;
        int currCity = pq.top().second;
        pq.pop();

        if (currDist > dist[currCity]) {
            continue; // skip if we have already found a shorter route
        }

        for (auto flight : graph[currCity]) {
            int nextCity = flight.first;
            int nextDist = flight.second;

            if (currDist + nextDist < dist[nextCity]) {
                dist[nextCity] = currDist + nextDist;
                pq.push({dist[nextCity], nextCity});
            }
        }
    }

    for (int i = 0; i < n; i++) {
        cout << dist[i] << " ";
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    graph.resize(n); // resize the graph to accommodate n cities

    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a - 1].push_back({b - 1, c}); // add flight connection to the adjacency list
    }

    dijkstra(n);

    return 0;
}
```

This code has a time complexity of O((n + m) log n) since each city and each flight connection is processed once. The priority queue operations take logarithmic time.

Note: In the code, we subtract 1 from the city numbers to convert them to zero-based indexing, as the adjacency list is zero-based.