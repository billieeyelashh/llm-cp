To solve this problem, we can use a graph traversal algorithm like Breadth-First Search (BFS) or Depth-First Search (DFS) to find a route from Uolevi's computer to Maija's computer.

Here is the step-by-step solution using BFS:

1. Read the input values for $n$ and $m$.
2. Create an adjacency list representation of the graph using an array of vectors. Each element of the array represents a computer, and the vector contains the computers it is connected to.
3. Initialize a queue for BFS traversal and a boolean array to mark visited computers.
4. Enqueue Uolevi's computer (computer 1) into the queue and mark it as visited.
5. While the queue is not empty, do the following steps:
   - Dequeue a computer from the front of the queue.
   - If the dequeued computer is Maija's computer (computer $n$), we have found a valid route. Print the minimum number of computers on the route, which is the level of the current computer in the BFS traversal.
   - Otherwise, iterate over the computers connected to the dequeued computer and enqueue them if they haven't been visited yet. Also, mark them as visited.
6. If we reach this point, it means there is no valid route from Uolevi's computer to Maija's computer. Print "IMPOSSIBLE".

Here is the C++ code implementation:

```cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> graph(n + 1); // adjacency list representation

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    vector<int> level(n + 1, -1); // level of each computer in the BFS traversal
    vector<int> parent(n + 1, -1); // parent of each computer in the BFS traversal

    queue<int> q;
    q.push(1); // Uolevi's computer
    level[1] = 0;

    while (!q.empty()) {
        int curr = q.front();
        q.pop();

        if (curr == n) {
            // Found a valid route
            cout << level[n] << endl;
            vector<int> route;
            while (curr != -1) {
                route.push_back(curr);
                curr = parent[curr];
            }
            for (int i = route.size() - 1; i >= 0; i--) {
                cout << route[i] << " ";
            }
            cout << endl;
            return 0;
        }

        for (int next : graph[curr]) {
            if (level[next] == -1) {
                q.push(next);
                level[next] = level[curr] + 1;
                parent[next] = curr;
            }
        }
    }

    // No valid route found
    cout << "IMPOSSIBLE" << endl;

    return 0;
}
```

This solution has a time complexity of O(n + m), where n is the number of computers and m is the number of connections.