To solve this problem, we can use the Bellman-Ford algorithm to detect negative cycles in the graph.

The main idea of the Bellman-Ford algorithm is to relax all the edges in the graph repeatedly, and if a relaxation is possible, then there is a negative cycle in the graph.

Here is the C++ code for solving the problem:

```cpp
#include <iostream>
#include <vector>

using namespace std;

struct Edge {
    int from, to, weight;
};

const int INF = 1e9;

vector<int> bellmanFord(int n, vector<Edge>& edges) {
    vector<int> dist(n + 1, INF);
    vector<int> parent(n + 1, -1);

    int x;
    for (int i = 0; i < n; ++i) {
        x = -1;
        for (Edge& edge : edges) {
            if (dist[edge.from] + edge.weight < dist[edge.to]) {
                dist[edge.to] = max(-INF, dist[edge.from] + edge.weight);
                parent[edge.to] = edge.from;
                x = edge.to;
            }
        }
    }

    if (x == -1) {
        return {};
    }

    for (int i = 0; i < n; ++i) {
        x = parent[x];
    }

    vector<int> cycle;
    for (int v = x;; v = parent[v]) {
        cycle.push_back(v);
        if (v == x && cycle.size() > 1) {
            break;
        }
    }

    reverse(cycle.begin(), cycle.end());
    return cycle;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<Edge> edges(m);
    for (int i = 0; i < m; ++i) {
        cin >> edges[i].from >> edges[i].to >> edges[i].weight;
    }

    vector<int> cycle = bellmanFord(n, edges);
    if (cycle.empty()) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        for (int node : cycle) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}
```

The `bellmanFord` function takes the number of nodes `n` and a vector of edges as input. It initializes the distance of all nodes to infinity except for the source node, which is set to 0. Then it performs relaxation on all edges `n` times. If a relaxation is possible on the `n`th iteration, it means that there is a negative cycle in the graph.

If a negative cycle is found, the function traces back the cycle starting from the node that was relaxed on the `n`th iteration. The cycle is stored in reverse order and then reversed before returning.

In the `main` function, we read the input, call the `bellmanFord` function, and print the result accordingly.

The time complexity of this solution is O(n * m) since we perform relaxation on all edges n times.