We can solve this problem using a topological sorting algorithm, such as Kahn's algorithm or depth-first search (DFS). Here, we will use Kahn's algorithm.

First, we need to represent the requirements as a directed graph. We can use an adjacency list to store the graph.

Next, we will initialize an array, `indegree`, of size `n+1` to keep track of the in-degree (number of incoming edges) of each course. We will also initialize an empty queue, `q`, to store the courses with an in-degree of 0.

We will iterate through each requirement and update the `indegree` array accordingly. For each requirement (a, b), we increment the `indegree` of course b by 1.

After updating the `indegree` array, we will enqueue all the courses with an in-degree of 0 into the queue.

Now, we can start the topological sorting algorithm. While the queue is not empty, we will dequeue a course, `curr`, from the queue, print it, and decrement the `indegree` of all its adjacent courses by 1. If any of the adjacent courses have an in-degree of 0 after decrementing, we enqueue them into the queue.

If at any point the queue becomes empty but we haven't printed all the courses, it means there is a cycle in the graph, and it is impossible to complete all the courses. In this case, we print "IMPOSSIBLE".

Here is the C++ code implementing the above algorithm:

```cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> graph(n + 1);
    vector<int> indegree(n + 1, 0);

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        indegree[b]++;
    }

    queue<int> q;
    for (int i = 1; i <= n; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }

    vector<int> order;
    while (!q.empty()) {
        int curr = q.front();
        q.pop();
        order.push_back(curr);

        for (int adj : graph[curr]) {
            indegree[adj]--;
            if (indegree[adj] == 0) {
                q.push(adj);
            }
        }
    }

    if (order.size() != n) {
        cout << "IMPOSSIBLE" << endl;
    } else {
        for (int course : order) {
            cout << course << " ";
        }
        cout << endl;
    }

    return 0;
}
```

The time complexity of this solution is O(n + m), where n is the number of courses and m is the number of requirements. This is because we need to iterate through each requirement and each course in the worst case. The space complexity is O(n + m) to store the graph and the indegree array.