To solve this problem, we can use a technique called dynamic programming. We will create a 2D array dp[i][j], where dp[i][j] represents whether it is possible to form a group with a difference of j using the first i apples.

Let's assume that the sum of all the apple weights is S. We want to find the minimum difference between the weights of the two groups. The maximum possible difference is S, so we will iterate from j = 0 to S/2 and check if it is possible to form a group with a difference of j.

The base case is dp[0][0] = true, as it is possible to form a group with a difference of 0 using no apples.

For each apple i from 1 to n, we iterate from j = 0 to S/2 and update dp[i][j] as follows:
- If dp[i-1][j] is true, it means we can form a group with a difference of j using the first i-1 apples. So, we set dp[i][j] as true.
- If dp[i-1][j-p[i]] is true, it means we can form a group with a difference of j-p[i] using the first i-1 apples. So, we set dp[i][j] as true.

The final answer will be the minimum j such that dp[n][j] is true. This means we can form a group with a difference of j using all the apples.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  int n;
  cin >> n;
  vector<int> p(n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> p[i];
    sum += p[i];
  }

  vector<vector<bool>> dp(n + 1, vector<bool>(sum / 2 + 1, false));
  dp[0][0] = true;

  for (int i = 1; i <= n; i++) {
    for (int j = 0; j <= sum / 2; j++) {
      dp[i][j] = dp[i - 1][j];
      if (j >= p[i - 1]) {
        dp[i][j] = dp[i][j] || dp[i - 1][j - p[i - 1]];
      }
    }
  }

  int minDiff = sum;
  for (int j = 0; j <= sum / 2; j++) {
    if (dp[n][j]) {
      minDiff = min(minDiff, sum - 2 * j);
    }
  }

  cout << minDiff << endl;

  return 0;
}
```

The time complexity of this solution is O(n * sum), where sum is the sum of all apple weights. Since the maximum value of sum is 10^9 * 20, this solution will run efficiently within the given constraints.