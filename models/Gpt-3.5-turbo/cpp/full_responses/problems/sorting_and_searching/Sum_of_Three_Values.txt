To solve this problem, we can use a nested loop to iterate through every possible pair of elements in the array. For each pair, we check if there exists a third element whose sum with the pair equals the target value. If such an element is found, we print its position along with the positions of the pair.

Here's the implementation in C++:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n, x;
    cin >> n >> x;

    vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    for (int i = 0; i < n - 2; ++i) {
        for (int j = i + 1; j < n - 1; ++j) {
            for (int k = j + 1; k < n; ++k) {
                if (nums[i] + nums[j] + nums[k] == x) {
                    cout << i + 1 << " " << j + 1 << " " << k + 1 << "\n";
                    return 0;
                }
            }
        }
    }

    cout << "IMPOSSIBLE\n";
    return 0;
}
```

The time complexity of this solution is O(n^3), which is efficient enough given the maximum constraint of n = 5000.