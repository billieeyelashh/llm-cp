To solve this problem, we can use a data structure called a deque (double-ended queue) to efficiently simulate the game.

Here is the step-by-step solution in C++:

```cpp
#include <iostream>
#include <deque>

using namespace std;

int main() {
    int n;
    cin >> n;
    
    // Create a deque to store the children
    deque<int> children;
    
    // Initialize the deque with the numbers from 1 to n
    for (int i = 1; i <= n; i++) {
        children.push_back(i);
    }
    
    // Initialize a variable to keep track of the removal order
    vector<int> removal_order;
    
    // Perform the game until all children are removed
    while (!children.empty()) {
        // Remove the first child and add it to the removal order
        int removed_child = children.front();
        children.pop_front();
        removal_order.push_back(removed_child);
        
        // If there is still a child left, remove the next child and move it to the end of the deque
        if (!children.empty()) {
            int next_child = children.front();
            children.pop_front();
            children.push_back(next_child);
        }
    }
    
    // Print the removal order
    for (int i = 0; i < n; i++) {
        cout << removal_order[i] << " ";
    }
    
    return 0;
}
```

This solution uses a deque to efficiently simulate the game. At each step, we remove the first child and add it to the removal order. If there is still a child left, we remove the next child and move it to the end of the deque. We repeat this process until all children are removed.

The time complexity of this solution is O(n), where n is the number of children.