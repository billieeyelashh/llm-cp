To count the number of subarrays with sum $x$, we can use a sliding window approach. We maintain two pointers, `left` and `right`, to represent the current subarray. 

We start with `left` and `right` both at the beginning of the array. At each step, we calculate the sum of the elements between `left` and `right` inclusive. If the sum is equal to `x`, we increment the count of subarrays. 

If the current sum is less than `x`, we move the `right` pointer one step to the right to include the next element. If the current sum is greater than `x`, we move the `left` pointer one step to the right to exclude the leftmost element.

We continue this process until we have considered all possible subarrays. The final count of subarrays with sum `x` is our answer.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n, x;
    cin >> n >> x;

    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    int count = 0;
    int left = 0, right = 0;
    int sum = 0;

    while (right < n) {
        sum += a[right];

        while (sum > x && left <= right) {
            sum -= a[left];
            left++;
        }

        if (sum == x) {
            count++;
        }

        right++;
    }

    cout << count << endl;

    return 0;
}
```

This solution has a time complexity of O(n), where n is the size of the array.