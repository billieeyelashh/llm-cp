To solve this problem, we can use the prefix sum technique. We'll calculate the prefix sum array, where each element represents the sum of all elements up to that index.

Let's denote the prefix sum array as `prefixSum`. We'll initialize a variable `count` to keep track of the number of subarrays with sum divisible by `n`.

For each prefix sum value `prefixSum[i]`, we'll calculate `prefixSum[i] % n` and store it in a frequency array `modFreq`. The frequency array `modFreq` will keep track of how many times each remainder value occurs.

We'll iterate through the prefix sum array and for each `prefixSum[i]`, increment `modFreq[prefixSum[i] % n]` by 1.

Finally, the number of subarrays with sum divisible by `n` is the sum of all possible combinations of 2 or more elements in `modFreq`. We can calculate this by iterating through `modFreq` and adding `modFreq[j] * (modFreq[j] - 1) / 2` to `count` for each `j` from 0 to `n-1`.

Here's the C++ code to implement this solution:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    vector<int> prefixSum(n + 1);
    prefixSum[0] = 0;
    for (int i = 1; i <= n; ++i) {
        prefixSum[i] = (prefixSum[i - 1] + arr[i - 1]) % n;
    }

    vector<long long> modFreq(n, 0);
    for (int i = 0; i <= n; ++i) {
        modFreq[prefixSum[i]]++;
    }

    long long count = 0;
    for (int i = 0; i < n; ++i) {
        count += modFreq[i] * (modFreq[i] - 1) / 2;
    }

    cout << count << endl;

    return 0;
}
```

This solution has a time complexity of O(n) and a space complexity of O(n), where n is the size of the input array.