To solve this problem optimally, we can iterate through the array and keep track of the maximum number collected so far. If the current number is one more than the maximum number collected, we update the maximum and continue. Otherwise, we have reached the end of a round and need to increment the round count.

Here is the C++ code to implement this solution:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int rounds = 0;
    int maxCollected = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] == maxCollected + 1) {
            maxCollected++;
        } else {
            rounds++;
        }
    }

    cout << rounds << endl;

    return 0;
}
```

This solution has a time complexity of O(n) as we iterate through the array once.