We can solve this problem using a greedy approach. The idea is to sort the customers based on their arrival day and then allocate rooms to each customer in the order they arrive.

Here is the step-by-step algorithm:

1. Read the number of customers, `n`, from input.
2. Create a vector of pairs to store the customers' arrival and departure days.
3. Read the arrival and departure days for each customer and store them in the vector.
4. Sort the vector in ascending order based on the arrival days.
5. Create a priority queue to store the departure days of the customers.
6. Create a vector to store the room number for each customer.
7. Initialize the current room number, `room`, to 1.
8. Iterate over the sorted vector of customers.
   - If the priority queue is not empty and the minimum departure day is less than or equal to the current customer's arrival day, remove it from the queue.
   - If the queue is empty, allocate a new room by incrementing `room`.
   - Add the current customer's departure day to the queue.
   - Assign the current room number to the customer.
9. Print the minimum number of rooms required, which is the maximum size of the priority queue during the iteration.
10. Print the room number for each customer.

Here is the C++ code implementing the above algorithm:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> customers(n);
    for (int i = 0; i < n; i++) {
        cin >> customers[i].first >> customers[i].second;
    }

    sort(customers.begin(), customers.end());

    priority_queue<int, vector<int>, greater<int>> departures;
    vector<int> roomNumber(n);

    int room = 1;
    for (int i = 0; i < n; i++) {
        if (!departures.empty() && departures.top() <= customers[i].first) {
            departures.pop();
        } else {
            room++;
        }
        departures.push(customers[i].second);
        roomNumber[i] = room;
    }

    cout << room << endl;
    for (int i = 0; i < n; i++) {
        cout << roomNumber[i] << " ";
    }

    return 0;
}
```

The time complexity of this solution is O(n log n) due to the sorting operation.