To solve this problem optimally, we can use a greedy approach.

First, we sort the tasks in non-decreasing order of their deadlines.

Next, we initialize two variables: "time" to keep track of our current finishing time, and "reward" to keep track of our total reward.

We iterate through each task in the sorted order. For each task, we update the "time" variable by adding the duration of the current task. If the updated "time" is greater than the deadline of the current task, we subtract the difference from the reward. Otherwise, we continue to the next task.

Finally, we output the maximum reward obtained.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> tasks(n);
    for (int i = 0; i < n; ++i) {
        cin >> tasks[i].first >> tasks[i].second;
    }

    sort(tasks.begin(), tasks.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        return a.second < b.second;
    });

    int time = 0;
    int reward = 0;
    for (int i = 0; i < n; ++i) {
        time += tasks[i].first;
        if (time > tasks[i].second) {
            reward -= (time - tasks[i].second);
        }
    }

    cout << reward << endl;

    return 0;
}
```

The time complexity of this solution is O(n log n) due to the sorting step.