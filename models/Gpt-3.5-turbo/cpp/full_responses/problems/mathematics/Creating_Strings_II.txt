To solve this problem, we can use the concept of permutations. The number of different strings that can be created using the characters of a given string is equal to the factorial of the length of the string.

However, since the given string can have duplicate characters, we need to account for that as well. We can divide the factorial by the factorial of the count of each character in the string.

Here is the C++ code to solve the problem:

```cpp
#include <iostream>
#include <vector>

const int MOD = 1000000007;

int factorial(int n) {
    int result = 1;
    for (int i = 1; i <= n; ++i) {
        result = (result * i) % MOD;
    }
    return result;
}

int main() {
    std::string s;
    std::cin >> s;

    std::vector<int> count(26, 0);
    for (char c : s) {
        count[c - 'a']++;
    }

    int totalPermutations = factorial(s.length());
    for (int i = 0; i < 26; ++i) {
        totalPermutations = (totalPermutations * factorial(count[i])) % MOD;
    }

    std::cout << totalPermutations << std::endl;

    return 0;
}
```

This solution has a time complexity of O(n), where n is the length of the given string.