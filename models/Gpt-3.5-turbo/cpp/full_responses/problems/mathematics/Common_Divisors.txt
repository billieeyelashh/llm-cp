To solve this problem, we can iterate over all pairs of integers in the array and compute the greatest common divisor (GCD) for each pair. We keep track of the maximum GCD seen so far and update it whenever we find a larger GCD.

Here's the C++ code to implement this solution:

```cpp
#include <iostream>
#include <algorithm>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int main() {
    int n;
    std::cin >> n;

    int arr[n];
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    int maxGcd = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int currentGcd = gcd(arr[i], arr[j]);
            maxGcd = std::max(maxGcd, currentGcd);
        }
    }

    std::cout << maxGcd << std::endl;

    return 0;
}
```

This solution has a time complexity of O(n^2) since we iterate over all pairs of integers. However, this solution will work efficiently for the given constraints.