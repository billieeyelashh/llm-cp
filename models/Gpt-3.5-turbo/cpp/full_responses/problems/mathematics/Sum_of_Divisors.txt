To solve this problem optimally, we can use a mathematical property of the sum of divisors. 

Let's consider a number $m$ and its prime factorization: 
$m = p_1^{a_1} \cdot p_2^{a_2} \cdot ... \cdot p_k^{a_k}$

The sum of divisors of $m$ is given by:
$\sigma(m) = (1 + p_1 + p_1^2 + ... + p_1^{a_1}) \cdot (1 + p_2 + p_2^2 + ... + p_2^{a_2}) \cdot ... \cdot (1 + p_k + p_k^2 + ... + p_k^{a_k})$

Now, let's consider the sum $\sum_{i=1}^n \sigma(i)$. We can see that the contribution of each prime factor $p$ will be repeated multiple times. For example, if $p$ appears in the prime factorization of numbers from $1$ to $n$, then it will appear in the sum $\sigma(i)$ for $i$ multiple times. 

To avoid computing the sum of divisors for each number from $1$ to $n$, we can instead compute the sum of divisors for each prime number up to $n$, and then multiply it by the number of times the prime appears in the prime factorization of numbers from $1$ to $n$.

Here is the C++ code to implement this approach:

```cpp
#include <iostream>
#include <vector>

using namespace std;
const int MOD = 1e9 + 7;

// Function to compute the sum of divisors for each prime number up to n
vector<long long> computeSumOfDivisors(int n) {
    vector<long long> sumOfDivisors(n + 1, 1);
    
    for (int i = 2; i <= n; i++) {
        if (sumOfDivisors[i] == 1) { // i is a prime number
            for (int j = i; j <= n; j += i) {
                int p = j, power = 0;
                while (p % i == 0) {
                    p /= i;
                    power++;
                }
                sumOfDivisors[j] *= (power + 1);
                sumOfDivisors[j] %= MOD;
            }
        }
    }
    
    return sumOfDivisors;
}

int main() {
    int n;
    cin >> n;

    vector<long long> sumOfDivisors = computeSumOfDivisors(n);

    long long ans = 0;
    for (int i = 1; i <= n; i++) {
        ans += sumOfDivisors[i];
        ans %= MOD;
    }

    cout << ans << endl;

    return 0;
}
```

This solution has a time complexity of $O(n \log \log n)$, which is optimal for the given constraints.