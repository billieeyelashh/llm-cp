To solve this problem, we can use a depth-first search (DFS) algorithm to find the maximum distance from each node to another node.

First, let's represent the tree as an adjacency list. We can use a vector of vectors to store the edges. Each index of the vector will represent a node, and the corresponding vector will contain the adjacent nodes.

Next, we will define a recursive function `dfs` that takes two parameters: the current node and its parent. Inside the function, we will iterate through all the adjacent nodes of the current node (excluding the parent) and recursively call the `dfs` function on each adjacent node.

While traversing the tree, we will keep track of the maximum distance from the current node to another node. We will maintain two variables: `max_distance1` and `max_distance2`. `max_distance1` will store the maximum distance from the current node to any other node in the subtree rooted at the current node. `max_distance2` will store the second maximum distance from the current node to any other node in the subtree rooted at the current node.

For each adjacent node, we will calculate the maximum distance from that node to another node using the formula `1 + max_distance1`. If this distance is greater than `max_distance1`, we update `max_distance2` and `max_distance1` accordingly.

Finally, after the DFS finishes, we can print the maximum distance for each node.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 2e5 + 5;
vector<int> adj[N];
int max_distance1[N], max_distance2[N];

void dfs(int node, int parent) {
    max_distance1[node] = max_distance2[node] = 0;
    
    for (int child : adj[node]) {
        if (child == parent)
            continue;
        
        dfs(child, node);
        
        int distance = 1 + max_distance1[child];
        
        if (distance > max_distance1[node]) {
            max_distance2[node] = max_distance1[node];
            max_distance1[node] = distance;
        } else if (distance > max_distance2[node]) {
            max_distance2[node] = distance;
        }
    }
}

int main() {
    int n;
    cin >> n;
    
    for (int i = 0; i < n - 1; i++) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    
    dfs(1, 0);
    
    for (int i = 1; i <= n; i++) {
        cout << max_distance1[i] << " ";
    }
    
    return 0;
}
```

The time complexity of this solution is O(n), where n is the number of nodes in the tree.