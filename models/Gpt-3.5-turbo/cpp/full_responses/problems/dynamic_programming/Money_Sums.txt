To solve this problem, we can use a dynamic programming approach. We will create a boolean array dp of size 1000001 and initialize all values as false. dp[i] will represent whether the sum i can be achieved using the given coins.

We can start by setting dp[0] as true, since we can always achieve a sum of 0 by not selecting any coin.

For each coin value x, we iterate from i = 1000000 to x. If dp[i - x] is true, it means that we can achieve the sum i - x using the previous coins. Hence, we can also achieve the sum i by selecting the current coin. Therefore, we set dp[i] as true.

Finally, we iterate through the dp array and count the number of true values. We also print all the indices (money sums) with true values.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> coins(n);
    for (int i = 0; i < n; ++i) {
        cin >> coins[i];
    }

    vector<bool> dp(1000001, false);
    dp[0] = true;

    for (int x : coins) {
        for (int i = 1000000; i >= x; --i) {
            if (dp[i - x]) {
                dp[i] = true;
            }
        }
    }

    int count = 0;
    for (bool value : dp) {
        if (value) {
            count++;
        }
    }

    cout << count << endl;
    for (int i = 0; i <= 1000000; ++i) {
        if (dp[i]) {
            cout << i << " ";
        }
    }

    return 0;
}
```

This solution has a time complexity of O(n * m), where n is the number of coins and m is the maximum value among the coins.