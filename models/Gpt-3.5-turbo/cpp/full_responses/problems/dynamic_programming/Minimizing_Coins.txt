To solve this problem optimally, we can use dynamic programming. We will create an array dp of size (x+1) and initialize all its elements with a large value initially (except for dp[0] = 0).

For each coin value c_i, we will iterate through the dp array from c_i to x, and update the minimum number of coins required to form that sum. We will do this by taking the minimum of the current dp value and dp[i - c_i] + 1.

Finally, we will return dp[x] as the minimum number of coins required to form the desired sum. If dp[x] is still the initial large value, it means it is not possible to form the sum x, so we will return -1.

Here is the C++ code:

```cpp
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

int main() {
    int n, x;
    cin >> n >> x;

    vector<int> coins(n);
    for (int i = 0; i < n; i++) {
        cin >> coins[i];
    }

    vector<int> dp(x + 1, INT_MAX);
    dp[0] = 0;

    for (int i = 1; i <= x; i++) {
        for (int j = 0; j < n; j++) {
            if (i >= coins[j] && dp[i - coins[j]] != INT_MAX) {
                dp[i] = min(dp[i], dp[i - coins[j]] + 1);
            }
        }
    }

    if (dp[x] == INT_MAX) {
        cout << -1 << endl;
    } else {
        cout << dp[x] << endl;
    }

    return 0;
}
```

This solution has a time complexity of O(nx), where n is the number of coins and x is the desired sum.