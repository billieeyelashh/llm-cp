To solve this problem, we can use a brute force approach where we calculate the Euclidean distance between every pair of points and keep track of the minimum distance found so far.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> points(n);
    for (int i = 0; i < n; i++) {
        cin >> points[i].first >> points[i].second;
    }

    int minDistance = INT_MAX;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            int distance = pow(points[i].first - points[j].first, 2) + pow(points[i].second - points[j].second, 2);
            minDistance = min(minDistance, distance);
        }
    }

    cout << minDistance << endl;

    return 0;
}
```

The code reads the number of points and their coordinates from the input. It then iterates over all possible pairs of points, calculates the Euclidean distance between them, and updates the minimum distance found so far if necessary. Finally, it prints the minimum distance squared as the output.

Note: Since the problem asks for the square of the minimum distance, we store the minimum distance squared in the `minDistance` variable instead of taking the square root.